[{"title":"Hexo折腾记——静态站点搜索","url":"https://joway.wang/posts/Hexo/2016-04-23-hexo-search.html","content":"前言对于静态博客一直有两大心病，其中一个是缺乏靠谱的评论插件, 的确有许多好的评论插件，但要么是要收费要么是大陆访问非常慢， 剩下的国内的也就多说了，然而这家伙不稳定不说，还不支持https，而且目前似乎也无人在维护了。另一块心病就是站内搜索。搜索技术虽然很复杂很麻烦，但说时候对于一个小博客网站而言，其实仅仅只是需要一个全站数据的json文件 ，一个靠谱算法，完全不需要任何后端技术就能够实现一个基本能用的搜索了。网上找了一圈，发现都没有人在做这个。只好自己动手了。\n\n把生成search.json的部分做成了一个插件: hexo-tokenize-search \nDemo\n准备首先一个小的搜索引擎所需要的技术大概是以下几点:\n\n数据抓取\n数据净化(去除标点, 英文大小写, 以及同义词转换等等)\n分词(中英文分词)\n匹配排序\n\n实践数据抓取对于自己的网站，事实上根本无所谓抓取，尤其是对于诸如Hexo之类的静态站点，可以查阅相关文档，自己编写插件使其在编译静态文件阶段就把文章数据导入到json中，当然，也可以自己写一个python/js 的脚本，把 markdown 源文件给解析出来生成单个json文件。\n我这里找到了 hexo-search 插件，但是这个插件只能把数据给拿出来，并不具备数据处理功能，后来我自己在它的基础上，魔改出一个了一个 (hexo-tokenize-search)[https://github.com/joway/hexo-tokenize-search] 版本。\n数据净化与分词在 我的 hexo-tokenize-search 插件中， 我添加了最基本的数据处理功能:\n\n利用正则表达式把html tags全部清除\n利用 Segment 分词模块，对title和content两个field的数据进行分词处理。 Segment 功能很强大，在分词中，还支持进行同义词转换，去掉诸如”因为、所以”这类无意义的关联词，去除标点符号等等\n\n最后我把数据处理成为如下形式:\n123456789101112[{\"title\": \"xxxxxx\",\"url\": \"xxxxxx\" ,\"content\": \"xxxxxx\" ,\"title_tokenize\": \"xx xx xx xx\",\"content_tokenize\": \"xx xx xx xx\"},{...}]\n匹配排序经国上面这几步，基本上完成了数据那块，接下来就是最让我头痛的关键字匹配排序了。\n由于我一切都是前端进行，所以不可能去加载什么字典，也无法进行复杂的计算，我的需求其实很简单，针对某个查询，对每个文本评估得出一个分数，再拿这个分数排序展现结果。但是这个评估算法我一直无法寻找到好的，许多现成的算法都是只能对英文有效，中文的匹配需要进行特殊处理。而这个东西又是一个非常麻烦的事情。\n最后，我实在无奈了，就写了一个弱智版本的加权算法，其实都不能称之为算法，因为它就是不停遍历遍历遍历比较是否相等……\n而且，如果只是比较两个字符是否相等的话，事实上也没必要进行分词了，所以这个算法让我非常蛋疼。。以后有空再来把这个评估算法写出来把。\n我当前版本的思路是: 分别对内容和标题进行匹配，计算出匹配的字符个数，总分数 计算公式为:\n\n总分数 = 内容匹配次数 + 标题匹配次数 * 100\n\n这样就可以优先把标题匹配的给取出来了。\n这种做法很傻逼，但是暂时没有能力想到评估的方法，因为分词的长度也是不定的，不依赖后端实在是想不出又快又好的算法。\n后记其实我后来想到, 写个脚本把hexo的文章数据post到elasticsearch服务器，然后前端直接能够进行各种花式搜索了。这种实践的成本无非是开一个es的容器，并配置好中文分词的插件。\n在折腾这个之前，我是想做一个开箱急用的插件，不过现在看来，还是开个es后端比较方便，但是话也说回来，为了一个博客搜索功能开个容器也太奢侈了。况且es本身就很占内存。如果能够有人做个API大家公用，或许我们前端只要三行代码就能实现一个搜索引擎了。:) \n源码现看js教程现写js代码 … 对js这种语言真的完全不能把控 ， 如果你要使用，calcScore 函数这段代码效率低，并且没有利用分词的优势，最好能够写个更好的替换掉。\n123456form action=\"/search\" method=\"get\" style=\"text-align: center\">    input type=\"text\" class=\"st-default-search-input search\" id=\"search\"           placeholder=\" Search...\" name=\"query\" style=\"height: 40px\">form>div id='result'>div>script src='/js/search.js'>script>\n1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071function getParameterByName(name, url) {    if (!url) url = window.location.href;    name = name.replace(/[\\[\\]]/g, \"\\\\$&\");    var regex = new RegExp(\"[?&]\" + name + \"(=([^&#]*)|&|#|$)\"),        results = regex.exec(url);    if (!results) return null;    if (!results[2]) return '';    return decodeURIComponent(results[2].replace(/\\+/g, \" \"));}function calcScore(key, tokenize) {    var score = 0;    for (var x = 0; x         if (tokenize[x] == null) {            break;        }        for (var i = 0; i             for (var t = 0; t                 if (tokenize[x][t] == key[i]) {                    score++;                }            }        }    }    return score;}function addCountToJson(key, json) {    for (var i = 0; i         // 题目匹配权重100 , 内容匹配权重1 , 匹配算法: 单字匹配 (待优化)        json[i]['score'] = calcScore(key, json[i].content_tokenize) + calcScore(key, json[i].title_tokenize) * 100;    }}// 按 json 元素 score 值进行排序function quickSort(json) {    if (json.length 1) {        return json;    }    var pivotIndex = Math.floor(json.length / 2);    var pivot = json.splice(pivotIndex, 1)[0]; // 基准    var left = [];    var right = [];    for (var i = 0; i         if (json[i].score             left.push(json[i]);        } else {            right.push(json[i]);        }    }    return quickSort(left).concat(pivot, quickSort(right));}window.onload = function () {    var query = getParameterByName('query');    if (query == null) {        query = '';    }    $(\".st-default-search-input\").val(query);    $.get(\"../search.json\", function (result) {        addCountToJson(query, result);        result = quickSort(result);        for (var i = result.length - 1; i >= 0; --i) {            $(\"#result\").append(' + result[i].url + '\"' + ' target=\"_blank\"' + '>' + result[i].title + ' 评分: ' + result[i].score + '');        }    });};\n","title_tokenize":["Hexo","折腾","记","静态","站点","搜索"],"content_tokenize":["前言","静态","博客","两","大","心病","缺少","谱","评论","插件","的确","好的","评论","插件","要末","收费","要末","大陆","访问","非常","慢","剩下","国内","说","家伙","不稳定","不说","还","不支持","https","目前","恍如","无人","保护","另一块","心病","站内","搜索","搜索","技术","很","复杂","很","麻烦","说","小","博客","网站","其实","仅仅","需要","全","站","数据","json","文件","谱","算法","完全","不需要","后端","技术","能够","实现","基本","能用的","搜索","网上","找","1","圈","发现","都","没","有人","做","只好","动手","生成","search","json","部份","做成","插件","hexo","tokenize","search","Demo","准备","小的","搜索引擎","需要","技术","大概是","以下","几点","数据","抓取","数据","净化","去除","标点","英文","大小","写","同义词","转换","分词","中英文","分词","匹配","排序","实践","数据","抓取","网站","事实上","根本","无所谓","抓取","尤其是","诸如","Hexo","静态","站点","查阅","相干","文档","编写","插件","使","编译","静态","文件","阶段","文章","数据","导入","json","中","写","python","js","脚本","markdown","源文件","解析","出来","生成","单个","json","文件","找","到了","hexo","search","插件","插件","只能","数据","出来","其实不","具有","数据处理","功能","后来","基础","上","魔","改","出","hexo","tokenize","search","https://github.com/joway/hexo-tokenize-search]","版本","数据","净化","分词","hexo","tokenize","search","插","件","中","添加","最","基本的","数据处理","功能","利用","正则","表达式","html","tags","全部","清除","利用","Segment","分词","模块","title","content","两个","field","数据","进行","分词","处理","Segment","功能","很","强大","分词","中","还","支持","进行","同义词","转换","去掉","诸如","这类","无意义","关联词","去除","标点符号","最后","数据处理","成为","以下","情势","123456789101112","title","xxxxxx","url","xxxxxx","content","xxxxxx","title","tokenize","xx","xx","xx","xx","content","tokenize","xx","xx","xx","xx","匹配","排序","经国","上面","几步","基本上","完成","数据","块","接下来","最","头痛","关键字","匹配","排序","一切都是","前端","进行","不可能","去","加载","字典","没法","进行","复杂的","计算","需求","其实","很","简单","针对","查询","每一个","文本","评估","得出","分数","再","分数","排序","展现","评估","算法","没法","寻觅","好的","现成","算法","都是","只能","英文","有效","中文","匹配","需要","进行","特殊","处理","东西","非常","麻烦的","事情","最后","实在","无奈了","写","弱智","版本","加权","算法","其实","都","不能","称之为","算法","不停","遍历","遍历","遍历","比较","是否是","相等","比较","两个","字符","是否是","相等","事实上","没","必要","进行","分词","算法","非常","蛋疼","以后","有空","再来","评估","算法","写","出来","当前","版本","思路","分别","内容","标题","进行","匹配","计算出","匹配","字符","个数","总分","数","计算","公式","总分","数","内容","匹配","次数","标题","匹配","次数","100","优先","标题","匹配","取","出来","这类","做法","很傻","逼","暂时","没","有能力","想到","评估","方法","分词","长度","也是","不定","不依赖","后端","实在","想","不","出","快","好的","算法","后记","其实","后来","想到","写","脚本","hexo","文章","数据","post","elasticsearch","服务器","前端","直接","能够","进行","花式","搜索","这类","实践","本钱","开","es","容器","配置","好","中文","分词","插件","折腾","之前","我是","想","做","开箱","急用","插件","现在","看来","还","开","es","后端","比较","方便","话","说","回来","博客","搜索","功能","开","容器","太","奢侈了","es","本身","很","占","内存","能够","有人","做","API","大家","公用","或许","前端","三行","代码","实现","搜索引擎","源码","现","看","js","教程","现","写","js","代码","js","这类","语言","真","完全","不能","控","使用","calcScore","函数","段","代码","效率","低","没有","利用","分词","优势","最好","能够","写","更好","替换","掉","123456","form","action","search","method","get","style","text","align","center","input","type","text","class","st","default","search","input","search","id","search","placeholder","Search","name","query","style","height","40","px","form","div","id","result","div","script","src","js","search","js","script","1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071","function","getParameterByName","name","url","if","url","url","window","location","href","name","name","replace","g","var","regex","new","RegExp","name","results","regex","exec","url","if","results","return","null","if","results","2","return","return","decodeURIComponent","results","2","replace","g","function","calcScore","key","tokenize","var","score","0","for","var","x","0","x","if","tokenize","x","null","break","for","var","i","0","i","for","var","t","0","t","if","tokenize","x","t","key","i","score","return","score","function","addCountToJson","key","json","for","var","i","0","i","题目","匹配","权重","100","内容","匹配","权重","1","匹配","算法","单字","匹配","优化","json","i","score","calcScore","key","json","i","content","tokenize","calcScore","key","json","i","title","tokenize","100","json","元素","score","值","进行","排序","function","quickSort","json","if","json","length","1","return","json","var","pivotIndex","Math","floor","json","length","2","var","pivot","json","splice","pivotIndex","1","0","基准","var","left","var","right","for","var","i","0","i","if","json","i","score","left","push","json","i","else","right","push","json","i","return","quickSort","left","concat","pivot","quickSort","right","window","onload","function","var","query","getParameterByName","query","if","query","null","query","st","default","search","input","val","query","get","search","json","function","result","addCountToJson","query","result","result","quickSort","result","for","var","i","result","length","1","i","0","i","result","append","result","i","url","target","blank","result","i","title","评分","result","i","score"]},{"title":"用编程思想学摄影","url":"https://joway.wang/posts/摄影/2016-04-10-摄影技巧.html","content":"我所理解的编程的思想就是从一件事物的本身定义声明出发，找到其具体实现原理，然后就可以随心所欲调用。半年前开始捣鼓摄影，开始还有点新鲜感，但是后来越玩越觉得枯燥，一些书籍和教程只是对于不同的应用场景，告诉你不同的参数，然后说中央已经决定了，这种场景就该设这些参数，然后你只能傻傻背诵”苟利国家生死以，岂因祸福避趋之”了。\n\n我向来不觉得摄影有多玄乎，本身的成像技术已经摆在那里，几乎就是初中的物理常识，要说参数，也无非就是那么四五个基本参数，辅以图像学的进阶知识进行后期。与软件行业的芜杂约定和限制比起来，简直不值得一提。(当然，纯粹是从入门级角度来看，并不是针对高阶的像素级别的摄影层次)\n终于，我实在是受不了部分摄影圈子的盲目崇拜，故弄玄虚的氛围了，抽了点时间，按照学编程的思路，对每个参数背景挖了一遍，当挖完以后，我才开始明白过来，照像机本身就只是一个工具，知其然与所以然之后，根本不需要去想面对的这幅画按照规范的做法，应该调多大光圈，设多少感光度。事实上，你只需要管自己的视觉判断，觉得想保留多少光亮，想突出哪个部分，然后依照已知晓的原理，具体落实到每个参数中去。\n当明白了这点以后，我才懂得为何摄影与其它都是艺术一样，都是一门可以表达自身思想的载物。接下来，只有一门钢琴是我还不明白究竟为何靠着机械的弹奏竟然能够表达思想的了。\n术语与对应作用及原理:ISO 感光度:名词含义:ISO感光度是CCD/CMOS（或胶卷）对光线的敏感程度(即对光线的化学反应速度)。\n实现原理 :数码相机通过改变感光芯片里讯号放大器的放大倍数来改变iso值，但当提升iso值时，放大器也会感光器件都有一个反应能力，这个反应能力是固定不变的，提升数码相机的ISO通过以下方法:\n在软件层面是通过两种方式实现的：\n\n强行提高每个像素点的亮度和对比度；\n使用多个像素点共同完成原来只要一个像素点来完成的任务。\n\n例如: 标准的ISO100是对感光元件的每个像素点感光，要提高到ISO200的感光度，只需要把2个像素点当成1个点来感光，就能获得原本2倍的感光速度，如果要提高到ISO400的水平，以此类推只要把4个像素点当成1个点来感光，便能获得4倍的感光速度。这种方法对高分辨率机器有优势。\n在硬件层面，通过\n\n电子信号放大增益技术.把传感器中讯号中的噪声放大，从而在提升亮度的同时，产生粗微粒的影像。\n\n副作用: 噪点:噪点原因: 内部的影像传感器在工作中一定受到不同程度的来周边电路和本身像素间的光电磁干扰，从而形成噪点。而电子信号强行增大后，其自身携带的噪点信号也会被同样增大。而对于才用像素点合并的方法来提升iso的方式，由于像素成倍减少了，所以为了保证原有的像素大小尺寸，会将原有信息扩大，导致噪点信息部分像素也被扩大了。\n当然，目前主流单反性能已经提升了很快了，在硬件软件上都有很大优化，所以一般的iso不会产生太大的噪点。\n所以，提升ISO以后对画质的损失是很大的。在像素相等的情况下，CCD/CMOS面积越大，高ISO的成像质量越好。也就是说：在CCD/CMOS面积一定的情况下，里面增加更多的像素反而会造成图像质量的下降。所以现在的数码相机不应该在1000万像素以上再简单增加几百万像素，而应该在提高CCD/CMOS质量上下功夫。\n实践检验:在弱光场合比如昏暗的室内，午夜的街头，ISO100时即使光圈开到最大，快门速度也需1/4秒甚至更慢才能正确曝光，这时手一晃照片就糊。\n\n快门名词含义:快门就是相机里控制曝光时间的装置。 \n实践检验:手持相机拍摄的安全速度原则：安全速度是焦距的倒数.\n光圈名词含义:镜头里调节进光孔大小的装置。\n实现原理 :所有相机都基于小孔成像原理：拿一个密封箱子，在任何一面钻个小圆孔，然后把有孔的这面对着窗外，窗外的景象比如一棵树什么的，就会在圆孔对面的箱内壁生成此树的倒影。假如我们在内壁涂上感光材料（装上胶卷或CCD/CMOS），这个有孔的箱子就是一台完整的照相机了。这就是针孔相机。 \n但是如果拿小孔来作为光圈的话，入光量又太小了，曝光一次就要几个小时甚至几天。所以单反相机都采用了凸镜的聚光功能。今天数码相机的各种镜头都是几块凹凸镜的排列组合。为了应付不同的光线强度，我们还需要给镜头装上能够调节这个洞的大小的装置，以便在强光时缩小为针孔，弱光时开成大洞。这个装置就是光圈。如今相机通过在镜头内部加入多边形或者圆形，并且面积可变的孔状光栅来达到控制镜头通光量。\n参数细节:光圈F值=镜头的焦距/镜头光圈的直径。 (所以长焦才会那么贵吧)\n常见的光圈值如下： F1， F1.4， F2， F2.8， F4， F5.6， F8， F11， F16， F22， F32， F44， F64。\n光圈的档位设计是:\n\n相邻的两档的数值相差1.4倍（2的平方根1.414的近似值）\n透光孔直径相差根号2倍，\n透光孔的面积相差一倍， \n底片上形成的影像的亮度相差一倍，\n维持相同曝光量所需要的时间相差一倍。\n\n例如光圈从F4调整到F2.8，进光量便多一倍；\n光圈值和光圈实际大小是相反的.最小光圈F22时光圈跟针孔差不多.\n镜头在中等光圈的时候成像最好（图片最清晰）。 成像最好的那档光圈为最佳光圈。\n光圈大一级，镜片就大很多，加工难度大。价格也就增加一个数量级。\n实践检验:\n控制进光量，这直接影响到图片是否能正确曝光，是拍摄成功与否的关键；\n控制景深，光圈越小，景深越大。虽然焦距和拍摄远近都影响景深，但焦距和被摄物远近的改变同时也会影响构图，如果构图确定，我们能控制景深的武器就只剩下光圈了；\n光圈影响图片的清晰度，任何一个镜头都是在中等光圈的时候成像最好（图片最清晰），在最大光圈和最小光圈的时候解像度差。\n\n\n曝光名词解释:照像机的成像模型:\n假设一个黑乎乎的密闭房间，一面墙壁上开了个小圆窗户，窗对面的内壁上安上感光材料（白沥青，大型胶卷或CCD/CMOS）。这就是一台大型房式照相机。在没有打开小窗之前，房间里是黑乎乎的。我们打开小窗，光线从小孔而入，射到对面墙壁的胶卷上，产生光化反应（或光电反应，如果是CCD/CMOS），照片就诞生了。此过程就叫做曝光。要得正确曝光的图片，必须精确决定曝光量。所谓曝光量就是让多少光进入这个密闭房间里。如果进光量太大，照片就会白花花一片，晚上变成了白天。如果进光量太小，照片就会黑乎乎的，白人变成黑人。\n曝光量就是进入光的量， 光圈和快门两样工具可以一起来控制曝光量。光圈（值）大小其实就是那个小圆窗户开多大，快门（速度）就是窗户打开多久。\n所以 得出如下公式:\n\n曝光量 = 光圈大小(非光圈F值) * 快门速度(单位 s)\n\n假若一个镜头光圈全开为F4，光圈F4快门速度1秒为正确曝光值，那F5.6和2秒以及F8和4秒也同样能得到准确曝光的图片。\n一张正确曝光的图片可以有N种不同的光圈和快门速度组合。\n光圈，快门速度，ISO 总结光圈和速度联合决定进光量，ISO决定CCD/CMOS的感光速度。如果进光量不够，我们可以开大光圈或者降低快门速度，还是不够的话就提高ISO。大光圈的缺点是解像度不如中等光圈，快门速度降低则图片可能会糊，提高ISO后图片质量也会下降 。\n\n测光与测光模式名词解释:测量光线的强度，自动给出能正确曝光的光圈和快门速度\n实现原理每个数码相机里都有一个光敏电阻（不同强度的光线照射时电阻值发生变化），相机内的电脑根据电阻值的变化确定光线强度，进而确定曝光值（光圈，快门）。\n测光模式主要有点测光，中央重点测光，区域（平均）测光三种。点测光只测取景框内一个小点的光线强度（此小点大约为取景框面积的10%到1%，看不同机型）。区域（平均）测光则把取景框分为5到63块（看机型不同），分别对每块测光然后再加权平均得到光照强度。中央重点测光是简化的区域（平均）测光，只把取景框分为中央圆圈和四周两块，分别测光，然后加权平均（中央圆圈的权重为70%左右）。\n实践检验:大多数情况下用区域测光即可。在光线明暗反差很大时应该采用点测光。用区域（平均）测光或中央重点也可以，你可根据自己的艺术创意进行曝光补偿。\n\n曝光补偿名词解释我们之所以能看见东西，不外乎两种情况：一是物体本身可以发光，比如太阳或灯泡；大多数情况是物体能反射外来光线。反射的光线越多，物体就越亮，反之则越暗。假设两个极端，纯黑色物体不会反射光线，反射率为零，而纯白的物体反射率是100%。在这两个极端之间取中间值就是不黑也不白的灰色，称为柯达灰，也称为18%中间灰。\n以一张客厅照片为例，客厅墙壁又白又亮，而电视机的大屏幕又黑又暗，窗帘和家具等亮度居中。要以谁的亮度来确定曝光？相机自动测光就是取平均数，最后给出一个让图片达到中间灰的曝光值。\n所以会导致本来应该雪白刺眼的场景拍出来却是一片灰色；再比如对着一堆煤球拍，本来是纯黑，拍出来却是灰煤。\n实践检验在明暗反差很大时自动曝光往往不准，需要手动暴光补偿。\n曝光补偿的原则：白加黑减。如果构图中有大片白色物体或者有灯等特别明亮的物体，就要相应增加曝光量（增大光圈or/and减低快门速度）；如果取景框中有大片黑色的物体，则要减少曝光量。\n对于raw格式图片，进行曝光补偿调整是几乎不太会影响质量的，所以夜景推荐使用raw格式\n\n焦距名词解释:光线经过透镜就会聚成一点（焦点） ，镜头的焦距就是从镜片（或镜片组）的中心到焦点的距离，单位是毫米\n镜头知识:\n标准镜头: 焦距50mm的镜头，简称标头.拍出来的照片类似肉眼平视的感觉（视角为45°左右）。\n\n广角镜头:（焦距小于35mm）能够让照相机“看得更宽阔”，因为它视角大.\n\n长焦镜头:（焦距大于70mm）能让照相机“看得更远”，但视角窄。\n\n定焦镜头: 焦距固定\n\n\n光学变焦与数码变焦\n变焦倍数＝最大焦距值/最小焦距值\n\n光学变焦: 依靠镜片的位移来实现焦距的改变。光学变焦倍数越大，里面的镜片就越多，镜头体积相应较大，画质相对较低，光圈相对较小。\n数码变焦: 只是软件层面的电子放大。\n\n色温与白平衡名词解释:色温: 以开尔文温度表示光线的色彩，单位是K。当物体被加热到一定的温度时就会发出光线，此光线不仅含有亮度的成份，更含有颜色的成份。温度越高，蓝色的成份越多，图像就会偏蓝；相反，温度越低，红色的成份就越多，图像就会偏红。\n光线的色温\n光源                                色温（Ｋ）\n蜡烛                                  2000\n钨丝灯                                 2500-3200\n荧光灯                               4500-6500\n日光（平均）                           5400\n有云天气下的日光                         6500-7000\n物体在不同色温的光源照射下会呈现不同的色调，在日光灯下整体偏白，在普通钨丝白炽灯下整体偏黄。白平衡就是照相机对白色的还原准确性。大多数情况下数码相机能准确判断光源的类型，拍出的照片颜色准确，但也有时候相机的电脑对色温做出了错误的判断。\n实践检验:选择raw可完美实现后期设置白平衡\n\n实践场景实践准则:\n光圈越大，景深越小；\n焦距越长，景深越小；\n离被摄物体越近，景深越小。\n\n夜景\n在夜景拍摄中，绝大多数场景推荐使用A挡光圈优先，因为可以随意控制景深。拍风光车流什么的就小光圈，低iso\n测光: 如果拍摄场景中只有主体一部分是亮的，就对它进行点测光。要是场景中有好多都是亮的，就用平均测光和中央重点测光就好。\n曝光: 原则上，白加黑减。对于夜晚，调整曝光补偿略微减0.3到0.7档曝光。\n用raw格式，为了后期调白平衡。对于夜景，白平衡是灵魂。\n\n\n未完\n\n\n参考资料:\n几个必要的摄影名词解释\n百度百科\n维基百科\n","title_tokenize":["编程","思想","学","摄影"],"content_tokenize":["理解","编程","思想","一件","事物","本身","定义","声明","动身","找到","具体","实现","原理","为所欲为","调用","半年","前","捣鼓","摄影","还","有点","新鲜感","后来","越","玩","越","觉得","枯燥","书籍","教程","不同的","运用","场景","告知","不同的","参数","说","中央","已","决定","这类","场景","设","参数","只能","傻傻","背诵","苟","利国","家","生死","岂","祸福","避","趋","向来","不觉","摄影","玄乎","本身","成像","技术","已","摆","在那里","几近","初中","物理","常识","要说","参数","那末","四五个","基本参数","辅","图象","学","进阶","知识","进行","后期","软件","行业","芜杂","约定","限制","起来","简直","不值得一提","纯洁","入门","级","角度","来看","不是","针对","高阶","像素","级","摄影","层次","终究","实在","受不了","部份","摄影","圈子","盲目","崇拜","故弄玄虚","氛围","抽","点","时间","学","编程","思路","每一个","参数","背景","挖","一遍","挖完","以后","才","明白","机","本身","工具","知","其然","所以然","以后","根本","不需要","去","想","面对","这幅画","规范","做法","应当","调","多大","光圈","设","感光度","事实上","只","需要","视觉","判断","觉得","想","保存","光亮","想","突出","部份","已","知晓","原理","具体","落实","每一个","参数","中","去","明白","这点","以后","才","知道","摄影","都是","艺术","都是","1","门","表达","本身","思想","载物","接下来","1","门","钢琴","还","不明白","究竟","靠着","机械","弹奏","居然","能够","表达","思想","术语","对应","作用","原理","ISO","感光度","名词","含义","ISO","感光度","CCD","CMOS","胶卷","对光","线","敏感","程度","光线","化学","反应速度","实现","原理","数码相机","改变","感光","芯片","里","讯号","放大器","放大","倍数","改变","iso","值","提升","iso","值时","放大器","会","感光","器件","都","反应","能力","反应","能力","固定","不变","提升","数码相机","ISO","以下","方法","软件","层面","两种","方式","实现","强行","提高","每一个","像素","点","亮度","对比度","使用","像素","点","共同","完成","原来","像素","点","完成","任务","标准","ISO","100","感光","元件","每一个","像素","点","感光","提高","ISO","200","感光度","只","需要","2个","像素","点","当作","1个","点","感光","取得","本来","2","倍","感光","速度","提高","ISO","400","水平","以此类推","4个","像素","点","当作","1个","点","感光","便","取得","4","倍","感光","速度","这种方法","高","分辨率","机器","优势","硬件","层面","电子","信号","放大","增益","技术","传感器","中","讯号","中的","噪声","放大","提升","亮度","产生","粗","微粒","影象","副作用","噪","点","噪","点","原","内部","影象","传感器","在工作中","一定","遭到","不同","程度","周边","电路","本身","像素","间","光","电磁","干扰","构成","噪","点","电子","信号","强行","增大","后","本身","携带","噪","点","信号","会","增大","才","像素","点","合并","方法","提升","iso","方式","像素","成倍","减少","保证","原有","像素","大小","尺寸","会","原有","信息","扩大","导致","噪","点","信息","部份","像素","扩大","目前","主流","单","反","性能","已","提升","很快","硬件","软件","上","都","很大","优化","一般的","iso","不会","产生","太大","噪","点","提升","ISO","以后","画质","损失","很大的","像素","相等","情况","下","CCD","CMOS","面积","越","大","高","ISO","成像","质量","越","好","CCD","CMOS","面积","1","定","情况","下","里面","增加","更多","像素","反而","会","造成","图象","质量","着落","现在","数码相机","不","应当","1000万","像素","以上","再","简单","增加","几百万","像素","应","提高","CCD","CMOS","质量","工夫","实践","检验","弱光","场","合","昏暗的","室内","午夜","街头","ISO","100时","光圈","开","最大","快门速度","需","1","4秒","更","慢","才能","正确","暴光","这时候","手","一晃","照片","糊","快门","名词","含义","快门","相机","里","控制","暴光","时间","装置","实践","检验","手持","相机","拍摄","安全","速度","原则","安全","速度","焦距","倒数","光圈","名词","含义","镜头","里","调理","进光","孔大小","装置","实现","原理","所有","相机","都","基于","小孔","成像","原理","密封","箱子","在任","何一","面","钻","小","圆孔","孔的","面对着","窗外","窗外","景象","如一","棵树","什么的","会","圆孔","对面","箱","内壁","生成","树","倒影","假定","内壁","涂上","感光","材料","装上","胶卷","CCD","CMOS","孔的","箱子","一台","完整的","照相机","针孔","相机","小孔","光圈","入","光","量","太","小了","暴光","一次","就要","几个","小时","几天","单反相机","都","采取","凸镜","聚光","功能","今天","数码相机","镜头","都是","几块","凹凸镜","排列","组合","应付","不同的","光线","强度","还","需要","镜头","装上","能够","调理","洞","大小","装置","强光","时","缩小","针孔","弱光","时","开成","大洞","装置","光圈","如今","相机","镜头","内部","加入","多边形","圆形","面积","可变","孔状","光栅","到达","控制","镜头","通","光","量","参数","细节","光圈","F","值","镜头","焦距","镜头","光圈","直径","长","焦","才","会","那末","贵吧","常见的","光圈","值","以下","F","1","F","1.4","F","2","F","2.8","F","4","F","5.6","F","8","F","11","F","16","F","22","F","32","F","44","F","64","光圈","档位","设计","相邻","两","档","数值","相差","1.4","倍","2","平方根","1.414","近似值","透光","孔直径","相差","根号","2","倍","透光","孔的","面积","相差","1","倍","底片","上","构成","影象","亮度","相差","1","倍","保持","相同","暴光","量","需要","时间","相差","1","倍","光圈","F","4","调解","F","2.8","进光","量","便多","1","倍","光圈","值","光圈","实际","大小","相反","最小","光圈","F","22","时光","圈","针孔","差不多","镜头","中等","光圈","成像","最好","图片","最","清晰","成像","最好","档","光圈","最好","光圈","光圈","大一级","镜片","大","很多","加工","难度","大","价格","增加","数量级","实践","检验","控制","进光","量","直接","影响到","图片","是否是","正确","暴光","拍摄","成功","关键","控制","景深","光圈","越","小","景深","越","大","焦距","拍摄","远近","都","影响","景深","焦距","摄物","远近","改变","会","影响","构图","构图","肯定","控制","景深","武器","只","剩下","光圈","光圈","影响","图片","清晰度","镜头","都是","中等","光圈","成像","最好","图片","最","清晰","最大","光圈","最小","光圈","解","度","差","暴光","名词","解释","机","成像","模型","假定","黑乎乎","密闭","房间","一面","墙壁","上","开","小圆","窗户","窗","对面","内壁","上","安上","感光材料","白沥青","大型","胶卷","CCD","CMOS","一台","大型","房式","照相机","没有","打开","小窗","之前","房间","里","黑乎乎","打开","小窗","光线","小孔","入","射","对面","墙壁","胶卷","上","产生","光化","反应","光电","反应","CCD","CMOS","照片","诞生","进程","叫做","暴光","要得","正确","暴光","图片","必须","精确","决定","暴光","量","所谓","暴光","量","光","进入","密闭","房间","里","进光","量","太大","照片","会","白花花","一片","晚上","变成","白天","进光","量","太","小","照片","会","黑乎乎","白人","变成","黑人","暴光","量","进入","光","量","光圈","快门","两样","工具","一起来","控制","暴光","量","光圈","值","大小","其实","小圆","窗户","开","多大","快门","速度","窗户","打开","多久","得出","以下","公式","暴光","量","光圈","大小","非","光圈","F","值","快门速度","单位","s","镜头","光圈","全开","F","4","光圈","F","4","快门速度","1秒","正确","暴光","值","F","5.6","2秒","F","8","4秒","得到","准确","暴光","图片","一张","正确","暴光","图片","N","不同的","光圈","快门速度","组合","光圈","快门速度","ISO","总结","光圈","速度","联合","决定","进光","量","ISO","决定","CCD","CMOS","感光","速度","进光","量","不够","开","大","光圈","着落","快门速度","不够","提高","ISO","大","光圈","缺点","解","度","中等","光圈","快门速度","着落","图片","可能会","糊","提高","ISO","后","图片","质量","会","着落","测光","测光","模式","名词解释","丈量","光线","强度","自动","给出","正确","暴光","光圈","快门速度","实现","原理","每一个","数码相机","里","都","光敏","电阻","不同","强度","光线","照耀","时","电","阻值","产生","变化","相机","内","电脑","电","阻值","变化","肯定","光线","强度","肯定","暴光","值","光圈","快门","测光","模式","主要","有点","测光","中央","重点","测光","区域","平均","测光","三种","点","测光","只","测","取景","框","内","小点","光线","强度","小点","大约","取景","框","面积","10%","1%","看","不同","机型","区域","平均","测光","取景","框","分为","5","63块","看","机型","不同","分别","块","测光","再加","权","平均","得到","光照强度","中央","重点","测光","简化","区域","平均","测光","只","取景","框","分为","中央","圆圈","四周两块","分别","测光","加权","平均","中央","圆圈","权重","70%","左右","实践","检验","大多数","情况","下","区域","测光","即可","光线","明暗","反差","很大","时","应当","采取","点","测光","区域","平均","测光","中央","重点","艺术","创意","进行","暴光","补偿","暴光","补偿","名词解释","看见","东西","不外乎","两种","情况","1","物体","本身","发光","太阳","灯泡","大多","数","情况","物体","反射","外来","光线","反射","光线","越多","物体","就越","亮","则越暗","假定","两个","极端","纯","黑色","物体","不会","反射","光线","反射率","零","纯白","物体","反射率","100%","两个","极端","之间","取","中间","值","不","黑","也不","白的","灰色","称为","柯达","灰","称为","18%","中间","灰","一张","客厅","照片","例","客厅","墙壁","白又","亮","电视机","大屏幕","黑","暗","窗帘","家具","亮度","居中","亮度","肯定","暴光","相机","自动","测光","取","平均数","最后","给出","图片","到达","中间","灰","暴光","值","会","导致","本来","应当","雪白","刺眼的","场景","拍","出来","却","一片","灰色","再","一堆","煤球","拍","本来","纯","黑","拍","出来","却","灰","煤","实践","检验","明暗","反差","很大","时","自动","暴光","常常","不准","需要","手动","暴光","补偿","暴光","补偿","原则","白加","黑","减","构图","中","大片","白色","物体","灯","特别","明亮的","物体","就要","相应","增加","暴光","量","增大","光圈","or","and","减低","快门速度","取景","框","中","大片","黑色","物体","则要","减少","暴光","量","raw","格式","图片","进行","暴光","补偿","调解","几乎不","太","会","影响","质量","夜景","推荐","使用","raw","格式","焦距","名词解释","光线","透镜","集聚","成","一点","焦点","镜头","焦距","镜片","镜片","组","中心","焦点","距离","单位","毫米","镜头","知识","标准","镜头","焦距","50","mm","镜头","简称","标","头","拍","出来","照片","类似","肉眼","平视","感觉","视角","45","°","左右","广角镜头","焦距","小于","35","mm","能够","照相机","看","更","宽阔","视角","大","长","焦","镜头","焦距","大于","70","mm","照相机","看","更远","视角","窄","定","焦","镜头","焦距","固定","光学","变焦","数码","变焦","变焦","倍数","最","大","焦距","值","最","小","焦距","值","光学","变焦","依托","镜片","位移","实现","焦距","改变","光学","变焦","倍数","越","大","里面","镜片","就越","镜头","体积","相应","较大","画质","相对","低","光圈","相对","较小","数码","变焦","软件","层面","电子","放大","色温","白平衡","名词","解释","色温","开尔文","温度","表示","光线","色采","单","位","K","物体","加热","一定","温度","时","会","发出","光线","光线","含有","亮度","成份","更","含有","色采","成份","温度","越","高","蓝色","成份","越多","图象","会","偏","蓝","相反","温度","越","低","红色","成份","就越","图象","会","偏","红","光线","色温","光源","色温","Ｋ","烛炬","2000","钨丝灯","2500","3200","荧光灯","4500","6500","日光","平均","5400","云天","气","下","日光","6500","7000","物体","不同","色温","光源","照耀","下","会","出现","不同的","色调","日光灯","下","整体","偏白","普通","钨丝","白炽灯","下","整体","偏","黄","白平衡","照相机","白色","还原","准确性","大多数","情况","下","数码相机","准确","判断","光源","类型","拍","出","照片","色采","准确","有时候","相机","电脑","色温","做出","毛病","判断","实践","检验","选择","raw","完善","实现","后期","设置","白平衡","实践","场景","实践","准则","光圈","越","大","景深","越","小","焦距","越","长","景深","越","小","摄","物体","越","近","景深","越","小","夜景","夜景","拍摄","中","绝大多数","场景","推荐","使用","A","挡","光圈","优先","随便","控制","景深","拍","风光","车流","什么的","小","光圈","低","iso","测光","拍摄","场景","中","主体","一部分","亮","进行","点","测光","场景","中","好多","都是","亮","平均","测光","中央","重点","测光","好","暴光","原则上","白加","黑","减","夜晚","调解","暴光","补偿","稍微","减","0.3","0.7","档","暴光","raw","格式","后期","调","白平衡","夜景","白平衡","灵魂","未完","参考资料","几个","必要的","摄影","名词","解释","百度","百科","维基","百科"]},{"title":"超星慕课视频系统破解","url":"https://joway.wang/posts/Hacked/2016-04-08-chaoxing-hacked.html","content":"超星那个傻逼系统有多逆天就不说了，简直是浪费生命，一个在21世纪还在实施这种土鳖无用的教学制度的国家倘若还能强国，简直是对时代的侮辱。\n本教程只适用于超星慕课上的课程，其它课程网站需要修改代码 。\n\n如果未安装Chrome，请下载并安装好Chrome。\n相关附件下载 :  https://dn-joway.qbox.me/1460124976338_chaoxin-hacked-crx.zip\n原理使用了javascript劫持技术，若你明白如何在浏览器中手动运行代码可跳到第二种方法，直接Chrome的开发工具里插入js脚本代码。这段代码参考了网上另外一个人的实现，如果还想进一步Hack，可以修改代码，我没有时间去折腾这个了，就直接拿来用了。\n在浏览器中输入 : chrome://extensions/ , 打开扩展程序页，将附件中的Tampermonkey_3.12_0.crx拖入页面，即可安装好插件。\n安装好后， 在插件页选择选项按钮，进入如下配置页:\n\n在Zip栏点击选择文件，导入 chaoxing-hacked.zip 压缩包\n\n安装好后，在已安装脚本里:选中装好的脚本，\n\n选择启动\n\n然后就可以打开超星的视频页，当加载完成后，即可自动破解快进限制，之后就可以直接拖动到最后完成观看任务了~\n\n如果不想安装插件，可以打开开发工具，手动输入 （ 会比较麻烦，且由于加载策略的不同，会有bug，推荐上面那种方法:\n1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859var HtmlUtil = {    htmlEncodeByRegExp: function (str) {        var s = \"\";        if (str.length == 0) return \"\";        s = str.replace(/&/g,\"&amp;\");        s = s.replace(/,\"&lt;\");        s = s.replace(/>/g,\"&gt;\");        s = s.replace(/\\'/g,\"&#39;\");        s = s.replace(/\\\"/g,\"&quot;\");        return s;    },    htmlDecodeByRegExp: function (str) {        var s = \"\";        if (str.length == 0) return \"\";        s = str.replace(/&amp;/g,\"&\");        s = s.replace(/&lt;/g,\");        s = s.replace(/&gt;/g,\">\");        s = s.replace(/&#39;/g,\"\\'\");        s = s.replace(/&quot;/g,\"\\\"\");        return s;    }};function getByClass(sClass){    var aResult = [];    var aEle = document.getElementsByTagName('*');    for (var i = 0; i         var arr = aEle[i].className.split(/\\s+/);        for(var j = 0; j             if(arr[j] == sClass){                aResult.push(aEle[i]);            }        }    }    return aResult;}if (typeof mArg == \"object\") {    if (mArg.attachments[0].isPassed == true) {        alert('Warning: This job has been finished once.');    } else {        mArg.attachments[0].isPassed = true;        mArg.attachments[0].headOffset = 1478000;        mArg.attachments[0].playTime = 1478000;        mArg.attachments[0].job = false;        var aBox = getByClass(\"ans-attach-online\");        if (aBox[0]) {            var htmlData = aBox[0].getAttribute(\"data\");            var bBox = getByClass(\"ans-cc\");            if (bBox[0]) {                bBox[0].innerHTML = '                    + HtmlUtil.htmlEncodeByRegExp(htmlData)                    + '\" type=\"online\">';                uParse(\".ans-cc\", null, mArg);                alert('Hacked');            }        }    }}\n","title_tokenize":["超星","慕课","视频","系统","破解"],"content_tokenize":["超星","傻","逼","系统","多逆天","不说","简直","浪费","生命","21世纪","还","实行","这类","土鳖","无用","教学","制度","国家","还","强国","简直","时期","侮辱","教程","只","适用于","超星","慕课","上","课程","课程","网站","需要","修改","代码","未","安装","Chrome","请","下载","安装","好","Chrome","相干","附件","下载","https://dn-joway.qbox.me/1460124976338_chaoxin-hacked-crx.zip","原理","使用","javascript","劫持","技术","明白","何在","浏览器","中","手动","运行","代码","跳","第二种","方法","直接","Chrome","开发","工具","里","插入","js","脚本","代码","段","代码","参考","网上","一个人","实现","还","想","进一步","Hack","修改","代码","没有","时间","去","折腾","直接","拿来","浏览器","中","输入","chrome","extensions","打开","扩大","程序","页","附件","中的","Tampermonkey","3.12","0","crx","拖","入","页面","即可","安装","好","插件","安装","好","后","插件","页","选择","选项","按钮","进入","以下","配置","页","Zip","栏","点击","选择","文件","导入","chaoxing","hacked","zip","紧缩","包","安装","好","后","已","安装","脚本","里","选中","装","好的","脚本","选择","启动","打开","超星","视频","页","加载","完成","后","即可","自动","破解","快进","限制","以后","直接","拖动","最后","完成","观看","任务","不想","安装","插件","打开","开发","工具","手动","输入","会","比较","麻烦","加载","策略","不同","会","bug","推荐","上面","那种","方法","1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859","var","HtmlUtil","htmlEncodeByRegExp","function","str","var","s","if","str","length","0","return","s","str","replace","g","amp","s","s","replace","lt","s","s","replace","g","gt","s","s","replace","g","39","s","s","replace","g","quot","return","s","htmlDecodeByRegExp","function","str","var","s","if","str","length","0","return","s","str","replace","amp","g","s","s","replace","lt","g","s","s","replace","gt","g","s","s","replace","39","g","s","s","replace","quot","g","return","s","function","getByClass","sClass","var","aResult","var","aEle","document","getElementsByTagName","for","var","i","0","i","var","arr","aEle","i","className","split","s","for","var","j","0","j","if","arr","j","sClass","aResult","push","aEle","i","return","aResult","if","typeof","mArg","object","if","mArg","attachments","0","isPassed","true","alert","Warning","This","job","has","been","finished","once","else","mArg","attachments","0","isPassed","true","mArg","attachments","0","headOffset","1478000","mArg","attachments","0","playTime","1478000","mArg","attachments","0","job","false","var","aBox","getByClass","ans","attach","online","if","aBox","0","var","htmlData","aBox","0","getAttribute","data","var","bBox","getByClass","ans","cc","if","bBox","0","bBox","0","innerHTML","HtmlUtil","htmlEncodeByRegExp","htmlData","type","online","uParse","ans","cc","null","mArg","alert","Hacked"]},{"title":"清明前后言","url":"https://joway.wang/posts/随感/2016-04-02-2016-04-01.html","content":"假日。\n发现生活变得索然无味。知道这是自己的原因，可桎梏就是如此，难以逃脱。\n开始想，一日为何要有三餐的必要，一生为何要漫长变老。一切也就是闲时的多想，忙碌与逼迫能够打消这一切的苦恼。\n\n生活在进步，每天都比昨天前进一点一滴，却依旧不知道要去向哪里。总以为，前进就是最大的正确，而生活似乎不在乎正确。\n大可以参加参加社会活动，刷刷微博讨论下民间恶俗，闲了去朋友圈投个票，热爱国家热爱中医，不是一切事物都需要做出价值判断，不是一切结果都以是非论断。\n前几天在手机里听到一段之前误按录下的语音，那时候正半睡半醒，那个刹那的确有种往日时光蹦到你眼前的错觉。每次回忆起旧日时光，脑中总会浮现出史铁生坐着轮椅在天坛里转悠的模样。我也不知道为什么会产生这样的联想，或者是我们都认为过去的时光过去之后，我们都像成了个残废。\n好在我们都能够选择，做出对个人利益最大化的选择。然而即便所有的选择明朗地摆在我的面前，我却依然无法下定拿起的决心。我开始相信，资本主义那套论调只是在统计上成立，而分立到每一个具体的人身上，都是一个个鲜活的灵魂实例。人的尊严也只有作为个体的时候，才如此的明显。\n我笑言自己是一个披着理性外衣的感性动物，我所谓的理性只是不想对这个世界无保留的浪费感性。我不聪明，但也不甘愚蠢。\n对世界进行价值判断和道德判断是解决个人危机最迅捷的途经，我从朦胧中二的岁月走到如今不朦胧却依旧中二的岁月里，靠着所谓的判断一次次解救自己也陷害了自己。即便一切都很明朗，即便我知道我需要怎么做才能利益最大化，只是我并未做好这些准备。\n时常怀疑这个世界是否会变好，很遗憾我看到的大部分人并没有在为这个世界变好而努力，甚至相当一部分做着变坏的努力。但转念一想,  所谓的好坏又是无从说起。或许对大部分人而言，灯红酒绿花前月下才算是真正的好。\n说到底，也只是短暂性状态不佳综合症。小时候养成的写日记的习惯，不说出来，心里难过。长大后，这习惯就变成了装逼。\n现在装逼完毕，满血复活，继续搬砖  :)   \n","title_tokenize":["清","明前","后","言"],"content_tokenize":["假日","发现","生活","变得","枯燥无味","知道","这是","缘由","桎梏","难以","逃脱","想","一日","要有","三餐","必要","一生","漫长","变","老","也就是","闲时","多想","劳碌","逼迫","能够","打消","苦恼","生活","进步","每天","都","昨天","前进","一点一滴","却","照旧","不知道","去向","总","以为","前进","最大","正确","生活","恍如","不在乎","正确","大","参加","参加","社会活动","刷刷","微博","讨论","下","民间","恶俗","闲","去","朋友圈","投","票","酷爱","国家","酷爱","中医","不是","事物","都","需要","做出","价值","判断","不是","都","是非","论断","前几天","手机","里","听到","一段","之前","误按","录","下","语音","那时候","正","半睡半醒","霎时","的确","有种","昔日","时光","蹦","眼前","错觉","每次","回忆起","旧日","时光","脑","中","总","会","显现","出","史铁生","坐着","轮椅","天坛","里","转游","样子","不知道","会","产生","联想","都","认为","过去","时光","过去","以后","都","成","残废","好在","都","能够","选择","做出","个人利益","最大化","选择","选择","明朗地","摆在","眼前","却","依然","没法","下定","拿起","决心","相信","资本主义","套","论调","统计","上","成立","分立","每一个","具体的","人身","上","都是","一个个","鲜活的","灵魂","实例","人","尊严","个体","才","明显","笑言","披","理性","外衣","感性","动物","所谓","理性","不想","这个世界","无","保存","浪费","感性","不","聪明","不甘","愚昧","世界","进行","价值","判断","道德","判断","解决","个人","危机","最","迅捷的","途经","朦胧","中","二的","岁月","走","如今","不","朦胧","却","照旧","中","二的","岁月","里","靠着","所谓","判断","一次次","解救","陷害","都","很","明朗","知道","需要","做","才能","利益","最大化","并未","做好","准备","常常","怀疑","这个世界","是否是","会","变好","很遗憾","看到","大部","分","人","并没有","这个世界","变好","努力","相当","一部分","做","变坏","努力","转念","一想","所谓","好坏","无从","说起","或许","大","部份","人","灯红酒绿","花前月下","才","算是","真正","好","说到底","只","短暂","性状","态","不佳","综合症","小时候","养成","写日记","习惯","不说","出来","心里","难过","长大","后","习惯","变成","装","逼","现在","装","逼","终了","满","血","复活","继续","搬","砖"]},{"title":"JPBC(Java Pairing Based Cryptography) 库 实例详解","url":"https://joway.wang/posts/Java/2016-04-02-jpbc-show-me-the-code.html","content":"前言:前面一篇文章讲了JPBC库的基本使用，但是单单一个介绍可能还是很难知道如何去实践，我这里把我最近实现的一个论文里的算法给拿过来，作为实例进行解释如何使用JPBC。论文地址: 可证安全的高效可托管公钥加密方案_刘文浩\n代码下载: JPBC_Optimize_IBE\n该方案是对 BF-IBE 方案 的一种改进，实现可托管加解密。生成一个公钥，一个托管私钥，一个主私钥，主私钥包含数字签名功能。\n建立ModelCommonText1234567public interface CommonText extends Externalizable {    /*    由于jpbc库的Element类型不支持序列化, 所以使用这个java原生的自定义序列化接口,    来达到序列化的目的.     */    String toString();}\n实现Externalizable接口，为了能够序列为比特流存入文件中。\nCipherText1234567public class CipherText implements CommonText {    private Element U;    private ArrayListbyte[]> V;        ...}\nU 为密文标识，V 为 经国处理后的密文二进制流\nPlainText1234public class PlainText implements CommonText {    private ArrayListbyte[]> message;    ...}\nUserKey12345678910public class UserKey {    // 以下为用户私有信息    private Element Kp; // 主解密私钥    private Element Ke; // 托管私钥,交给服务器    private Element Ppub; // 公钥    public UserKey() {    }}\nSystemParameter123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960public class SystemParameter {    // 系统公共参数:    // 1. 素数阶q    // 2. G1,G2, 其中G2 == G1    private Field G1;    // 3. 双线性映射关系 e ( 这里设成pairing    /*    pairing.pairing(x, y) 代表数学上 e（x,y）    双线性映射    */    private static Pairing pairing;    // 4. n : 二进制位数    // 5. P : 群G1的生成元    private Element P;// G1的生成元    // 6. g2 : e(P,P) 值    private Element g2;    // 7. H : 杂凑函数(这里选择哈希函数 sh256)    public static int SIZE = 32; // 256 bit    public SystemParameter(Field g1, Pairing pairing, Element p, Element g2, Field zr) {        G1 = g1;        SystemParameter.pairing = pairing;        P = p;        this.g2 = g2;        Zr = zr;    }    public Field getZr() {        return Zr;    }    public void setZr(Field zr) {        Zr = zr;    }    private Field Zr; // // {1,...,r} 整数集    public SystemParameter(Field g1, Pairing pairing, Element p, Element g2) {        G1 = g1;        this.pairing = pairing;        P = p;        this.g2 = g2;    }        ....}\n基础加解密实现:详情见注释\nIdent 接口之所以弄个接口，是为了后面测试性能的时候，可以用到代理，这样方便点。\n1234567891011121314151617public interface Ident {    void setUp();    UserKey privateKeyGen();    CipherText encrypt(PlainText plainText, UserKey userKey);    CipherText encrypt(String filename, UserKey userKey) throws IOException;    PlainText userDecrypt(CipherText cipherText, UserKey userKey);    PlainText escrowDecrypt(CipherText cipherText, UserKey userKey);    PlainText userDecrypt(String filename, UserKey userKey) throws IOException, ClassNotFoundException;    PlainText escrowDecrypt(String filename, UserKey userKey) throws IOException, ClassNotFoundException;}\nBaseIdentSystem该类实现了:\n\n系统初始化\n密钥生成\n加密文件或比特流\n用户主私钥解密文件或比特流\n托管解密主私钥或比特流\n\n123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181public class BaseIdentSystem implements Ident {    private SystemParameter systemParameter;    public BaseIdentSystem() {        setUp();    }    /**     * 判断配对是否为对称配对，不对称则输出错误信息     *     * @param pairing     */    private void checkSymmetric(Pairing pairing) {        if (!pairing.isSymmetric()) {            throw new RuntimeException(\"密钥不对称!\");        }    }    /*只需要启动一次    系统初始化(Setup): 给定一个安全参数k,执行下面的步骤。    1) 输出 2 个阶为素数 q 的循环群 G1 与 G2 、群G1的生成元P,以及双线性映射e:G1 X G1 ->G2    2)计算g2 = e(P,P)。    3)选择杂凑函数H:G2 -> {0,1}^n,其中n是整数。    此方案的明文空间是 M = {0,1}^n ,密文空间是 C = G^* X {0,1}^n。    系统公共参数 params 为 (q,G1,G2,e,n,P,g2,H)。     */    @Override    public void setUp() {        Utils.log(\"-------------------系统建立阶段----------------------\");        //双线性群的初始化        Pairing pairing = PairingFactory.getPairing(\"jpbc.properties\");        PairingFactory.getInstance().setUsePBCWhenPossible(true);        checkSymmetric(pairing);        Field G1 = pairing.getG1(); //G1 == G2 对称        Element P = G1.newRandomElement().getImmutable();// 生成G1的生成元P        Element g2 = pairing.pairing(P, P).getImmutable();        systemParameter = new SystemParameter(                G1, pairing, P, g2, pairing.getZr()        );    }    /*用户的(双)私钥生成算法:每个用户生成自己的公钥及其对应的 2 个 解密私钥。    1. 随机选择一个随机数 x (- Zq ,并将其 设置为主解密私钥,即Kp = x。    2. 将托管解密私钥设为Ke = x^-1 P    3. 将公钥设为Ppub = xP (- G1 。     */    @Override    public UserKey privateKeyGen() {        Utils.log(\"-------------------密钥生成阶段----------------------\");        Element x = getRandInZr(); // 用户自己主私钥,用户自己设置        Element Kp = x.getImmutable();        Element Ke = systemParameter.getP().mulZn(x.invert()).getImmutable();        Element Ppub = systemParameter.getP().mulZn(x).getImmutable();        return new UserKey(Kp, Ke, Ppub);    }    /*    拿Ppub对V加密    密文 C = (U, V)    1. 首先选择 r (- Zq    2.     */    @Override    public CipherText encrypt(PlainText plainText, UserKey userKey) {        Utils.log(\"-------------------加密阶段----------------------\");        Element r = getRandInZr();        Element U = userKey.getPpub().mulZn(r).getImmutable();//U        Element g2_r = systemParameter.get_g2().powZn(r);        byte[] sha256_g2_r = Utils.sha256(g2_r.toBytes());        ArrayListbyte[]> cipherV = new ArrayList<>();        int size = plainText.getMessage().size();        ArrayListbyte[]> bytesBox = plainText.getMessage();        for (int i = 0; i             cipherV.add(Utils.xor(bytesBox.get(i), sha256_g2_r));        }        Utils.log(\"明文\", plainText);        Utils.log(\"密文\", new CipherText(U, cipherV));        return new CipherText(U, cipherV);    }    @Override    public CipherText encrypt(String filename, UserKey userKey) throws IOException {        return encrypt(new PlainText(FileUtils.fileToByteArray(filename)), userKey);    }    /*    拿Ke对V解密     */    @Override    public PlainText userDecrypt(CipherText cipherText, UserKey userKey) {        Utils.log(\"-------------------主私钥解密阶段----------------------\");        Utils.logBegTime();        Element eUKp_1_P = pairing(                cipherText.getU().getImmutable(),                systemParameter.getP().mulZn(userKey.getKp().invert())).getImmutable();        Utils.logEndTime(\"配对结束\");        ArrayListbyte[]> plainBytes = new ArrayList<>();        ArrayListbyte[]> cipherV = cipherText.getV();        Utils.logBegTime();        byte[] sha256_eUKp_1_P = Utils.sha256(eUKp_1_P.toBytes());        Utils.logEndTime(\"哈希结束\");        Utils.logBegTime();        for (byte[] aCipherV : cipherV) {            plainBytes.add(Utils.xor(aCipherV,sha256_eUKp_1_P));        }        Utils.logEndTime(\"解密异或循环结束\");        Utils.log(\"主私钥解密后明文\", new PlainText(plainBytes));        return new PlainText(plainBytes);    }    @Override    public PlainText userDecrypt(String filename, UserKey userKey)            throws ClassNotFoundException, IOException {        Utils.logBegTime();        CipherText cipherText = (CipherText) FileUtils.readObject(filename);        Utils.logEndTime(\"读取密文文件中的信息至内存\");        return userDecrypt(cipherText, userKey);    }    @Override    public PlainText escrowDecrypt(CipherText cipherText, UserKey userKey) {        Utils.log(\"-------------------托管私钥解密阶段----------------------\");        Element eUKe = pairing(                cipherText.getU().getImmutable(),                userKey.getKe().getImmutable()).getImmutable();        byte[] sha256_eUKe = Utils.sha256(eUKe.toBytes());        ArrayListbyte[]> plainBytes = new ArrayList<>();        ArrayListbyte[]> cipherV = cipherText.getV();        for (byte[] aCipherV : cipherV) {            plainBytes.add(Utils.xor(aCipherV, sha256_eUKe));        }        Utils.log(\"托管解密后明文\", new PlainText(plainBytes));        return new PlainText(plainBytes);    }    // BLS sing:    @Override    public PlainText escrowDecrypt(String filename, UserKey userKey) throws IOException, ClassNotFoundException {        CipherText cipherText = (CipherText) FileUtils.readObject(filename);        return escrowDecrypt(cipherText, userKey);    }    private Element getRandInZr() {        return systemParameter.getZr().newRandomElement().getImmutable();    }    private Element pairing(Element var1, Element var2) {        return SystemParameter.getPairing().pairing(var1, var2).getImmutable();    }}\nBLS 短签名:用于对用户加密后的文件进行签名认证\n12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364public class BLS01 {    public BLS01() {    }    public BLS01Parameters setup() {        BLS01ParametersGenerator setup = new BLS01ParametersGenerator();        setup.init(PairingFactory.getPairingParameters(\"jpbc.properties\"));        return setup.generateParameters();    }    public AsymmetricCipherKeyPair keyGen(BLS01Parameters parameters) {        BLS01KeyPairGenerator keyGen = new BLS01KeyPairGenerator();        keyGen.init(new BLS01KeyGenerationParameters(null, parameters));        return keyGen.generateKeyPair();    }    public byte[] sign(String message, CipherParameters privateKey) {        byte[] bytes = message.getBytes();        BLS01Signer signer = new BLS01Signer(new SHA256Digest());        signer.init(true, privateKey);        signer.update(bytes, 0, bytes.length);        byte[] signature = null;        try {            signature = signer.generateSignature();        } catch (CryptoException e) {            throw new RuntimeException(e);        }        return signature;    }    public boolean verify(byte[] signature, String message, CipherParameters publicKey) {        byte[] bytes = message.getBytes();        BLS01Signer signer = new BLS01Signer(new SHA256Digest());        signer.init(false, publicKey);        signer.update(bytes, 0, bytes.length);        return signer.verifySignature(signature);    }    public static void main(String[] args) {        BLS01 bls01 = new BLS01();        // Setup        AsymmetricCipherKeyPair keyPair = bls01.keyGen(bls01.setup());        // Test same message        String message = \"Hello World!\";        System.out.println(bls01.sign(message, keyPair.getPrivate()).length);        assertTrue(bls01.verify(bls01.sign(message, keyPair.getPrivate()), message, keyPair.getPublic()));        // Test different messages        assertFalse(bls01.verify(bls01.sign(message, keyPair.getPrivate()), \"Hello Italy!\", keyPair.getPublic()));    }}","title_tokenize":["JPBC","Java","Pairing","Based","Cryptography","库","实例","详解"],"content_tokenize":["前言","前面","一篇","文章","讲","JPBC","库","基本","使用","单单","介绍","可能","很难","知道","去","实践","把我","最近","实现","论文","里","算法","过来","实例","进行","解释","使用","JPBC","论文","地址","证","安全的","高效","托管","公钥","加密","方案","刘文浩","代码","下载","JPBC","Optimize","IBE","方案","BF","IBE","方案","一种","改进","实现","托管","加","解密","生成","公钥","托管","私钥","主私钥","主私钥","包括","数字签名","功能","建立","ModelCommonText","1234567","public","interface","CommonText","extends","Externalizable","jpbc","库","Element","类型","不支持","序列","化","使用","java","原生","自定义","序列","化","接口","到达","序列","化","目的","String",null,"实现","Externalizable","接口","能够","序列","比特流","存入","文件","中","CipherText","1234567","public","class","CipherText","implements","CommonText","private","Element","U","private","ArrayListbyte","V","U","密文","标识","V","经国","处理","后","密文","二进制","流","PlainText","1234","public","class","PlainText","implements","CommonText","private","ArrayListbyte","message","UserKey","12345678910","public","class","UserKey","以下","用户","私有","信息","private","Element","Kp","主","解密","私钥","private","Element","Ke","托管","私钥","交给","服务器","private","Element","Ppub","公钥","public","UserKey","SystemParameter","123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960","public","class","SystemParameter","系统","公共","参数","1","素数","阶","q","2","G","1","G","2","中","G","2","G","1","private","Field","G","1","3","双线","性","映照","关系","e","设","成","pairing","pairing","pairing","x","y","代表","数","学","上","e","x","y","双线","性","映照","private","static","Pairing","pairing","4","n","二进制","位数","5","P","群","G","1","生成","元","private","Element","P","G","1","生成","元","6","g","2","e","P","P","值","private","Element","g","2","7","H","杂凑","函数","选择","哈希","函数","sh","256","public","static","int","SIZE","32","256","bit","public","SystemParameter","Field","g","1","Pairing","pairing","Element","p","Element","g","2","Field","zr","G","1","g","1","SystemParameter","pairing","pairing","P","p","this","g","2","g","2","Zr","zr","public","Field","getZr","return","Zr","public","void","setZr","Field","zr","Zr","zr","private","Field","Zr","1","r","整数","集","public","SystemParameter","Field","g","1","Pairing","pairing","Element","p","Element","g","2","G","1","g","1","this","pairing","pairing","P","p","this","g","2","g","2","基础","加","解密","实现","详情","见","注释","Ident","接口","弄","接口","后面","测试","性能","用到","代理","方便","点","1234567891011121314151617","public","interface","Ident","void","setUp","UserKey","privateKeyGen","CipherText","encrypt","PlainText","plainText","UserKey","userKey","CipherText","encrypt","String","filename","UserKey","userKey","throws","IOException","PlainText","userDecrypt","CipherText","cipherText","UserKey","userKey","PlainText","escrowDecrypt","CipherText","cipherText","UserKey","userKey","PlainText","userDecrypt","String","filename","UserKey","userKey","throws","IOException","ClassNotFoundException","PlainText","escrowDecrypt","String","filename","UserKey","userKey","throws","IOException","ClassNotFoundException","BaseIdentSystem","该类","实现","系统","初始化","密钥","生成","加密","文件","比特流","用户","主私钥","解密","文件","比特流","托管","解密","主私钥","比特流","123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181","public","class","BaseIdentSystem","implements","Ident","private","SystemParameter","systemParameter","public","BaseIdentSystem","setUp","判断","配对","是否是","对称","配对","不对称","输出","错误信息","param","pairing","private","void","checkSymmetric","Pairing","pairing","if","pairing","isSymmetric","throw","new","RuntimeException","密钥","不对称","只","需要","启动","一次","系统","初始化","Setup","给定","安全","参数","k","实行","下面","步骤","1","输出","2","阶","素数","q","循环","群","G","1","G","2","群","G","1","生成","元","P","双线","性","映照","e","G","1","X","G","1","G","2","2","计算","g","2","e","P","P","3","选择","杂凑","函数","H","G","2","0","1","n","中","n","整数","方案","明文","空间","M","0","1","n","密文","空间","C","G","X","0","1","n","系统","公共","参数","params","q","G","1","G","2","e","n","P","g","2","H","Override","public","void","setUp","Utils","log","系统","建立","阶段","双线","性群","初始化","Pairing","pairing","PairingFactory","getPairing","jpbc","properties","PairingFactory","getInstance","setUsePBCWhenPossible","true","checkSymmetric","pairing","Field","G","1","pairing","getG","1","G","1","G","2","对称","Element","P","G","1","newRandomElement","getImmutable","生成","G","1","生成","元","P","Element","g","2","pairing","pairing","P","P","getImmutable","systemParameter","new","SystemParameter","G","1","pairing","P","g","2","pairing","getZr","用户","双","私钥","生成","算法","每一个","用户","生成","公钥","对应","2","解密","私钥","1","随机","选择","随机","数","x","Zq","设置","为主","解密","私钥","Kp","x","2","托管","解密","私钥","设","Ke","x","1","P","3","公钥","设","Ppub","xP","G","1","Override","public","UserKey","privateKeyGen","Utils","log","密钥","生成","阶段","Element","x","getRandInZr","用户","主私钥","用户","设置","Element","Kp","x","getImmutable","Element","Ke","systemParameter","getP","mulZn","x","invert","getImmutable","Element","Ppub","systemParameter","getP","mulZn","x","getImmutable","return","new","UserKey","Kp","Ke","Ppub","Ppub","V","加密","密文","C","U","V","1","选择","r","Zq","2","Override","public","CipherText","encrypt","PlainText","plainText","UserKey","userKey","Utils","log","加密","阶段","Element","r","getRandInZr","Element","U","userKey","getPpub","mulZn","r","getImmutable","U","Element","g","2","r","systemParameter","get","g","2","powZn","r","byte","sha","256","g","2","r","Utils","sha","256","g","2","r","toBytes","ArrayListbyte","cipherV","new","ArrayList","int","size","plainText","getMessage","size","ArrayListbyte","bytesBox","plainText","getMessage","for","int","i","0","i","cipherV","add","Utils","xor","bytesBox","get","i","sha","256","g","2","r","Utils","log","明文","plainText","Utils","log","密文","new","CipherText","U","cipherV","return","new","CipherText","U","cipherV","Override","public","CipherText","encrypt","String","filename","UserKey","userKey","throws","IOException","return","encrypt","new","PlainText","FileUtils","fileToByteArray","filename","userKey","Ke","V","解密","Override","public","PlainText","userDecrypt","CipherText","cipherText","UserKey","userKey","Utils","log","主私钥","解密","阶段","Utils","logBegTime","Element","eUKp","1","P","pairing","cipherText","getU","getImmutable","systemParameter","getP","mulZn","userKey","getKp","invert","getImmutable","Utils","logEndTime","配对","结束","ArrayListbyte","plainBytes","new","ArrayList","ArrayListbyte","cipherV","cipherText","getV","Utils","logBegTime","byte","sha","256","eUKp","1","P","Utils","sha","256","eUKp","1","P","toBytes","Utils","logEndTime","哈希","结束","Utils","logBegTime","for","byte","aCipherV","cipherV","plainBytes","add","Utils","xor","aCipherV","sha","256","eUKp","1","P","Utils","logEndTime","解密","异","循环","结束","Utils","log","主私钥","解密","后","明文","new","PlainText","plainBytes","return","new","PlainText","plainBytes","Override","public","PlainText","userDecrypt","String","filename","UserKey","userKey","throws","ClassNotFoundException","IOException","Utils","logBegTime","CipherText","cipherText","CipherText","FileUtils","readObject","filename","Utils","logEndTime","读取","密文","文件","中的","信息","内存","return","userDecrypt","cipherText","userKey","Override","public","PlainText","escrowDecrypt","CipherText","cipherText","UserKey","userKey","Utils","log","托管","私钥","解密","阶段","Element","eUKe","pairing","cipherText","getU","getImmutable","userKey","getKe","getImmutable","getImmutable","byte","sha","256","eUKe","Utils","sha","256","eUKe","toBytes","ArrayListbyte","plainBytes","new","ArrayList","ArrayListbyte","cipherV","cipherText","getV","for","byte","aCipherV","cipherV","plainBytes","add","Utils","xor","aCipherV","sha","256","eUKe","Utils","log","托管","解密","后","明文","new","PlainText","plainBytes","return","new","PlainText","plainBytes","BLS","sing","Override","public","PlainText","escrowDecrypt","String","filename","UserKey","userKey","throws","IOException","ClassNotFoundException","CipherText","cipherText","CipherText","FileUtils","readObject","filename","return","escrowDecrypt","cipherText","userKey","private","Element","getRandInZr","return","systemParameter","getZr","newRandomElement","getImmutable","private","Element","pairing","Element","var","1","Element","var","2","return","SystemParameter","getPairing","pairing","var","1","var","2","getImmutable","BLS","短","签名","用于","用户","加密","后","文件","进行","签名","认证","12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364","public","class","BLS","01","public","BLS","01","public","BLS","01","Parameters","setup","BLS","01","ParametersGenerator","setup","new","BLS","01","ParametersGenerator","setup","init","PairingFactory","getPairingParameters","jpbc","properties","return","setup","generateParameters","public","AsymmetricCipherKeyPair","keyGen","BLS","01","Parameters","parameters","BLS","01","KeyPairGenerator","keyGen","new","BLS","01","KeyPairGenerator","keyGen","init","new","BLS","01","KeyGenerationParameters","null","parameters","return","keyGen","generateKeyPair","public","byte","sign","String","message","CipherParameters","privateKey","byte","bytes","message","getBytes","BLS","01","Signer","signer","new","BLS","01","Signer","new","SHA","256","Digest","signer","init","true","privateKey","signer","update","bytes","0","bytes","length","byte","signature","null","try","signature","signer","generateSignature","catch","CryptoException","e","throw","new","RuntimeException","e","return","signature","public","boolean","verify","byte","signature","String","message","CipherParameters","publicKey","byte","bytes","message","getBytes","BLS","01","Signer","signer","new","BLS","01","Signer","new","SHA","256","Digest","signer","init","false","publicKey","signer","update","bytes","0","bytes","length","return","signer","verifySignature","signature","public","static","void","main","String","args","BLS","01","bls","01","new","BLS","01","Setup","AsymmetricCipherKeyPair","keyPair","bls","01","keyGen","bls","01","setup","Test","same","message","String","message","Hello","World","System","out","println","bls","01","sign","message","keyPair","getPrivate","length","assertTrue","bls","01","verify","bls","01","sign","message","keyPair","getPrivate","message","keyPair","getPublic","Test","different","messages","assertFalse","bls","01","verify","bls","01","sign","message","keyPair","getPrivate","Hello","Italy","keyPair","getPublic"]},{"title":"JPBC(Java Pairing Based Cryptography) 库 使用","url":"https://joway.wang/posts/Java/2016-04-02-jpbc-base.html","content":"前言这段时间由于竞赛需要学习了JPBC库的使用， 不得不说，虽然此库极其强大，然而由于毕竟这块没有像那些大规模商用的东西那样流行，所以网上无论是英文还是中文的资料都极为稀少，官方文档也语焉不详。折腾了快半个月才把它大致搞懂，所以想把过程写下来，方便他人学习使用，如有错误，望指出。\n若想直接看源代码，可跳到 : JPBC(Java Pairing Based Cryptography) 库 实例详解\n\n背景知识:双线性群初始化:\n质数阶双线性群（Prime-Order Bilinear Groups）；\n合数阶双线性群（Composite-Order Bilinear Groups）；\n\n双线性群运算 :\n指数群 Zr的加法和乘法\n双线性群$G_1$,$G_2$的乘法和指数幂\n目标群$G_T$乘法和指数幂\n双线性群$G_1$,$G_2$映射到目标群$G_T$的对（Pairing）运算；\n\n质数阶双线性群（Prime-Order Bilinear Groups）给定一个大质数p，$G_1$,$G_2$,$G_T$ 均是阶为p的乘法循环群，e 为双线性映射 e : $G_1$ x $G_2$ -> $G_T$\n对称双线性映射: $G_1$ = $G_2$ 即 e : $G_1$ x $G_1$ -> $G_T$\n更多知识，请查阅相关文献和维基百科。\nJPBC中的双线性在JPBC中， G1,G2是乘法循环群。\n且G1,G2的元素都是一个个点坐标(基于椭圆曲线)，而$G_T$是$Z_p$中的一个数。\nJPBC 使用初始化在所有操作之前， 都必须有对双线性群进行初始化。官方文档对各个参数进行了详细说明。这里我使用A群， 建立 jpbc.properties 文件， 内容如下:\ntype=a\nq 8780710799663312522437781984754049815806883199414208211028653399266475630880222957078625179422662221423155858769582317459277713367317481324925129998224791\nh 12016012264891146079388821366740534204802954401251311822919615131047207289359704531102844802183906537786776\nr 730750818665451621361119245571504901405976559617\nexp2 159\nexp1 107\nsign1 1\nsign0 1\n参数说明:\n- type : 指定椭圆曲线的种类\n- q : G群的阶数的比特长度\n产生随机数:12345678//随机产生一个Z_p群的元素Element Z_p = pairing.getZr().newRandomElement().getImmutable();//随机产生一个G_1群的元素Element G_1 = pairing.getG1().newRandomElement().getImmutable();//随机产生一个G_2群的元素Element G_2 = pairing.getG2().newRandomElement().getImmutable();//随机产生一个G_T群的元素Element G_T = pairing.getGT().newRandomElement().getImmutable();\n将指定的元素哈希到双线性群中 :12345678//将byte[] byteArray_Z_p哈希到Z_p群Element hash_Z_p = pairing.getZr().newElement().setFromHash(byteArray_Z_p, 0, byteArray_Z_p.length);//将byte[] byteArray_G_1哈希到G_1群Element hash_G_1 = pairing.getG1().newElement().setFromHash(byteArray_G_1, 0, byteArray_G_1.length);//将byte[] byteArray_G_2哈希到G_2群Element hash_G_2 = pairing.getG2().newElement().setFromHash(byteArray_G_2, 0, byteArray_G_2.length);//将byte[] byteArray_G_T哈希到G_T群Element hash_G_T = pairing.getGT().newElement().setFromHash(byteArray_G_T, 0, byteArray_G_T.length);\n双线性群的运算12345678910111213141516171819202122232425262728293031323334353637//初始化相关参数Element G_1 = pairing.getG1().newRandomElement().getImmutable();Element G_2 = pairing.getG2().newRandomElement().getImmutable();Element Z = pairing.getZr().newRandomElement().getImmutable();Element G_T = pairing.getGT().newRandomElement().getImmutable();\tElement G_1_p = pairing.getG1().newRandomElement().getImmutable();Element G_2_p = pairing.getG2().newRandomElement().getImmutable();Element Z_p = pairing.getZr().newRandomElement().getImmutable();Element G_T_p = pairing.getGT().newRandomElement().getImmutable();\t//G_1的相关运算//G_1 multiply G_1Element G_1_m_G_1 = G_1.mul(G_1_p);//G_1 power ZElement G_1_e_Z = G_1.powZn(Z);\t//G_2的相关运算//G_2 multiply G_2Element G_2_m_G_2 = G_2.mul(G_2_p);//G_2 power ZElement G_2_e_Z = G_2.powZn(Z);\t//G_T的相关运算//G_T multiply G_TElement G_T_m_G_T = G_T.mul(G_T_p);//G_T power ZElement G_T_e_Z = G_T.powZn(Z);\t//Z的相关运算//Z add ZElement Z_a_Z = Z.add(Z_p);//Z multiply ZElement Z_m_Z = Z.mul(Z_p);\t//Pairing运算Element G_p_G = pairing.pairing(G_1, G_2);\n使用JPBC中，可能会需要用到的其它函数:由于JPBC并不是一个完整的密码学库，仅仅实现了双线性映射相关的部分。在实现一些密码学算法的时候，需要用到一些其它函数，而这些函数的参数与JPBC的基本参数类型Element又不是匹配的，一开始并不知道直接调用toBytes()就行了，所以纠结了好久。\n我用一个Utils类封装了一些常用函数，以便后续调用:\n123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990public class Utils {\t    /**     * 标准sha256加密     *     * @param data     * @return hash     */    public static byte[] sha256(byte[] data) {        //Create a sha 256 of the message        SHA256Digest dgst = new SHA256Digest();        dgst.reset();        dgst.update(data, 0, data.length);        int digestSize = dgst.getDigestSize();        byte[] hash = new byte[digestSize];        dgst.doFinal(hash, 0);        return hash;    }\t\t    public static String bytesToHex(byte[] bytes) {        return org.apache.commons.codec.binary.Hex.encodeHexString(bytes);    }\t    public static byte[] hexToBytes(String s) {        int len = s.length();        byte[] data = new byte[len / 2];        for (int i = 0; i 2) {            data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) 4)                    + Character.digit(s.charAt(i + 1), 16));        }        return data;    }\t    public static byte[] xor(byte[] a, byte[] b) {        byte[] result = new byte[Math.min(a.length, b.length)];        for (int i = 0; i             result[i] = (byte) (((int) a[i]) ^ ((int) b[i]));        }        return result;    }\t    // 把一个byte[] 分拆成每段256字节的数组List    public static ArrayListbyte[]> slice(byte[] msg) {\t        ArrayListbyte[]> list = new ArrayListbyte[]>();\t        // 待优化        // boxCount 表示分组数目        int boxCount = ((msg.length % SystemParameter.SIZE) == 0)                ? (msg.length / SystemParameter.SIZE) :                ((msg.length / SystemParameter.SIZE) + 1);\t        for (int i = 0; i 1; ++i) {            list.add(Arrays.copyOfRange(msg,                    i * SystemParameter.SIZE, (i + 1) * SystemParameter.SIZE));        }        list.add(Arrays.copyOfRange(msg,                (boxCount - 1) * SystemParameter.SIZE, msg.length));        return list;    }\t    // 数组list组装成单个的byte[]    public static byte[] splice(ArrayListbyte[]> byteMessage) {\t        int boxCount = byteMessage.size();\t        // byteSum 表示总字节数大小        int byteSum = (SystemParameter.SIZE * (boxCount - 1)) +                byteMessage.get(boxCount - 1).length;        byte[] temp = new byte[byteSum];\t        for (int i = 0; i 1; ++i) {            for (int t = 0; t                 temp[i * SystemParameter.SIZE + t] = byteMessage.get(i)[t];            }        }        for (int i = 0; i 1).length; ++i) {            temp[SystemParameter.SIZE * (boxCount - 1) + i] =                    byteMessage.get(boxCount - 1)[i];        }        return temp;    }\t\t    public static String toString(ArrayListbyte[]> byteMessage) {        return new String(splice(byteMessage));    }\t}\n上面包含了哈希和异或函数，以及一个把明文密文分拆给一个List以及组装回去的函数。\n注意点\nJava的运算结果都是产生一个新的Element来存储，所以我们需要把运算结果赋值给一个新的Element；\nJava在进行相关运算时，参与运算的Element值可能会改变。所以，如果需要在运算过程中保留参与运算的Element值，在存储的时候一定要调用getImmutable()\n为了保险起见，防止Element在运算的过程中修改了Element原本的数值，可以使用Element.duplicate()方法。这个方法将返回一个与Element数值完全一样的Element，但是是个新的Element对象。\n\n参考资料Java密码学原型算法实现——第三部分：双线性对\nJPBC DOC\n","title_tokenize":["JPBC","Java","Pairing","Based","Cryptography","库","使用"],"content_tokenize":["前言","段","时间","比赛","需要","学习","JPBC","库","使用","不得","不说","库","极其","强大","毕竟","块","没有","大规模","商用","东西","流行","网上","无论是","英文","中文","资料","都","极其","希少","官方","文档","语焉不详","折腾","快","半个","月","才","大致","弄","懂","想","进程","写下来","方便","学习","使用","毛病","指出","若想","直接","看","源代码","跳","JPBC","Java","Pairing","Based","Cryptography","库","实例","详解","背景","知识","双线","性群","初始化","质数","阶","双线","性群","Prime","Order","Bilinear","Groups","合数","阶","双线","性群","Composite","Order","Bilinear","Groups","双线","性群","运算","指数","群","Zr","加法","乘法","双线","性群","G","1","G","2","乘法","指数","幂","目标","群","G","T","乘法","指数","幂","双线","性群","G","1","G","2","映照","目标","群","G","T","Pairing","运算","质数","阶","双线","性群","Prime","Order","Bilinear","Groups","给定","大","质数","p","G","1","G","2","G","T","均","阶","p","乘法","循环群","e","双线","性","映照","e","G","1","x","G","2","G","T","对称","双线","性","映照","G","1","G","2","e","G","1","x","G","1","G","T","更多","知识","请","查阅","相干","文献","维基","百科","JPBC","中的","双线","性","JPBC","中","G","1","G","2","乘法","循环群","G","1","G","2","元素","都是","一个个点","坐标","基于","椭圆","曲线","G","T","Z","p","中的","1","个数","JPBC","使用","初始化","所有","操作","之前","都","必须","双线","性群","进行","初始化","官方","文档","参数","进行","详细","说明","使用","A","群","建立","jpbc","properties","文件","内容","以下","type","a","q","8780710799663312522437781984754049815806883199414208211028653399266475630880222957078625179422662221423155858769582317459277713367317481324925129998224791","h","12016012264891146079388821366740534204802954401251311822919615131047207289359704531102844802183906537786776","r","730750818665451621361119245571504901405976559617","exp","2","159","exp","1","107","sign","1","1","sign","0","1","参数","说明","type","指定","椭圆","曲线","种类","q","G","群","阶","数","比特","长度","产生","随机数","12345678","随机","产生","Z","p","群","元素","Element","Z","p","pairing","getZr","newRandomElement","getImmutable","随机","产生","G","1","群","元素","Element","G","1","pairing","getG","1","newRandomElement","getImmutable","随机","产生","G","2","群","元素","Element","G","2","pairing","getG","2","newRandomElement","getImmutable","随机","产生","G","T","群","元素","Element","G","T","pairing","getGT","newRandomElement","getImmutable","指定","元素","哈希","双线","性群","中","12345678","byte","byteArray","Z","p","哈希","Z","p","群","Element","hash","Z","p","pairing","getZr","newElement","setFromHash","byteArray","Z","p","0","byteArray","Z","p","length","byte","byteArray","G","1","哈希","G","1","群","Element","hash","G","1","pairing","getG","1","newElement","setFromHash","byteArray","G","1","0","byteArray","G","1","length","byte","byteArray","G","2","哈希","G","2","群","Element","hash","G","2","pairing","getG","2","newElement","setFromHash","byteArray","G","2","0","byteArray","G","2","length","byte","byteArray","G","T","哈希","G","T","群","Element","hash","G","T","pairing","getGT","newElement","setFromHash","byteArray","G","T","0","byteArray","G","T","length","双线","性群","运算","12345678910111213141516171819202122232425262728293031323334353637","初始化","相干","参数","Element","G","1","pairing","getG","1","newRandomElement","getImmutable","Element","G","2","pairing","getG","2","newRandomElement","getImmutable","Element","Z","pairing","getZr","newRandomElement","getImmutable","Element","G","T","pairing","getGT","newRandomElement","getImmutable","Element","G","1","p","pairing","getG","1","newRandomElement","getImmutable","Element","G","2","p","pairing","getG","2","newRandomElement","getImmutable","Element","Z","p","pairing","getZr","newRandomElement","getImmutable","Element","G","T","p","pairing","getGT","newRandomElement","getImmutable","G","1","相干","运算","G","1","multiply","G","1","Element","G","1","m","G","1","G","1","mul","G","1","p","G","1","power","ZElement","G","1","e","Z","G","1","powZn","Z","G","2","相干","运算","G","2","multiply","G","2","Element","G","2","m","G","2","G","2","mul","G","2","p","G","2","power","ZElement","G","2","e","Z","G","2","powZn","Z","G","T","相干","运算","G","T","multiply","G","TElement","G","T","m","G","T","G","T","mul","G","T","p","G","T","power","ZElement","G","T","e","Z","G","T","powZn","Z","Z","相干","运算","Z","add","ZElement","Z","a","Z","Z","add","Z","p","Z","multiply","ZElement","Z","m","Z","Z","mul","Z","p","Pairing","运算","Element","G","p","G","pairing","pairing","G","1","G","2","使用","JPBC","中","可能会","需要","用到","函数","JPBC","其实不","完整的","密码学","库","仅仅","实现","双线","性","映照","相干","部份","实现","密码","学","算法","需要","用到","函数","函数","参数","JPBC","基本","参数","类型","Element","不是","匹配","一开始","其实不","知道","直接","调用","toBytes","行","纠结","好久","Utils","类","封装","经常使用","函数","后续","调用","123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990","public","class","Utils","标准","sha","256","加密","param","data","return","hash","public","static","byte","sha","256","byte","data","Create","a","sha","256","of","the","message","SHA","256","Digest","dgst","new","SHA","256","Digest","dgst","reset","dgst","update","data","0","data","length","int","digestSize","dgst","getDigestSize","byte","hash","new","byte","digestSize","dgst","doFinal","hash","0","return","hash","public","static","String","bytesToHex","byte","bytes","return","org","apache","commons","codec","binary","Hex","encodeHexString","bytes","public","static","byte","hexToBytes","String","s","int","len","s","length","byte","data","new","byte","len","2","for","int","i","0","i","2","data","i","2","byte","Character","digit","s","charAt","i","16","4","Character","digit","s","charAt","i","1","16","return","data","public","static","byte","xor","byte","a","byte","b","byte","result","new","byte","Math","min","a","length","b","length","for","int","i","0","i","result","i","byte","int","a","i","int","b","i","return","result","byte","分","拆","成","段","256","字节","数组","List","public","static","ArrayListbyte","slice","byte","msg","ArrayListbyte","list","new","ArrayListbyte","优化","boxCount","表示","分组","数目","int","boxCount","msg","length","SystemParameter","SIZE","0","msg","length","SystemParameter","SIZE","msg","length","SystemParameter","SIZE","1","for","int","i","0","i","1","i","list","add","Arrays","copyOfRange","msg","i","SystemParameter","SIZE","i","1","SystemParameter","SIZE","list","add","Arrays","copyOfRange","msg","boxCount","1","SystemParameter","SIZE","msg","length","return","list","数组","list","组装","成","单个","byte","public","static","byte","splice","ArrayListbyte","byteMessage","int","boxCount","byteMessage","size","byteSum","表示","总","字节","数","大小","int","byteSum","SystemParameter","SIZE","boxCount","1","byteMessage","get","boxCount","1","length","byte","temp","new","byte","byteSum","for","int","i","0","i","1","i","for","int","t","0","t","temp","i","SystemParameter","SIZE","t","byteMessage","get","i","t","for","int","i","0","i","1","length","i","temp","SystemParameter","SIZE","boxCount","1","i","byteMessage","get","boxCount","1","i","return","temp","public","static","String",null,"ArrayListbyte","byteMessage","return","new","String","splice","byteMessage","上面","包括","哈希","异","函数","一个把","明文","密文","分","拆","List","组装","回去","函数","注意","点","Java","运算","都是","产生","新的","Element","存储","需要","运算","赋值","新的","Element","Java","进行","相干","运算","时","参与","运算","Element","值","可能会","改变","需要","运算","进程","中","保存","参与","运算","Element","值","存储","一定要","调用","getImmutable","保险","避免","Element","运算","进程","中","修改","Element","本来","数值","使用","Element","duplicate","方法","方法","返回","Element","数值","完全","Element","新的","Element","对象","参考资料","Java","密码学","原型","算法","实现","第三","部份","双线","性","JPBC","DOC"]},{"title":"Java IO 性能优化一个小实例","url":"https://joway.wang/posts/Java/2016-04-01-java-io-optimize.html","content":"现实需求:\n把一个对象序列化，并保存至文件\n从文件中读出字节码并反序列化为对象\n\n\n原代码:123FileInputStream fileIn = new FileInputStream(filename);ObjectInputStream in = new ObjectInputStream(fileIn);Object object = in.readObject();\n读取 24M 图片平均花费了 4000 ms 左右\n优化:1234FileInputStream fileIn = new FileInputStream(filename);ObjectInputStream in = new ObjectInputStream(        new BufferedInputStream(fileIn));Object object = in.readObject();\n读取 24M 图片平均花费了 300 ms 左右\n知其然，知其所以然:原本文件是一个个字节地读的， 使用了BufferedInputStream后，它会首先把一段文件读入缓存内。\nstackoverflow 里有人说 : This will reduce I/O by a factor of 8.\n","title_tokenize":["Java","IO","性能","优化","小","实例"],"content_tokenize":["现实","需求","对象","序列","化","保存","文件","文件","中","读出","字节","码","反","序列","化为","对象","原代码","123","FileInputStream","fileIn","new","FileInputStream","filename","ObjectInputStream","in","new","ObjectInputStream","fileIn","Object","object","in","readObject","读取","24","M","图片","平均","花费","4000","ms","左右","优化","1234","FileInputStream","fileIn","new","FileInputStream","filename","ObjectInputStream","in","new","ObjectInputStream","new","BufferedInputStream","fileIn","Object","object","in","readObject","读取","24","M","图片","平均","花费","300","ms","左右","知","其然","知","所以然","本来","文件","一个个","字节","读","使用","BufferedInputStream","后","会首","先","一段","文件","读入","缓存","内","stackoverflow","里","有人","说","This","will","reduce","I","O","by","a","factor","of","8"]},{"title":"记一次解决Mac扬声器破音问题的神奇经历","url":"https://joway.wang/posts/Mac/2016-03-28-记一次解决Mac扬声器破音问题的神奇经历.html","content":"在我昨天正兴致勃勃地听王健林牛津大学演讲的时候，突然扬声器出现了破音，捣鼓了半天开启了重启大法，又开启了重置NVRAM大法，然而都没有什么卵用，于是便怀疑是更新完 OSX 10.11.4 后的bug(妈的，苹果有几次软件更新是靠谱的吗，然而我还是忍不住会去跟风升级怎么破。。。)。然而 Mac 并不能回退系统，而且这个问题是在使用了11.4几天以后才出现的说明系统原因可能性并不会特别高，另外，我连启动声音都出现了破音，这就让我开始担心是不是硬件出了问题。然而我无非就是听王健林的时候声音开的大了点啊啊啊啊。。。WTF！！！\n心怀着侥幸，觉得硬件也没可能说坏就坏，又看到我三天前刚好Time Machine 备份过了一下，心一横，决定重新恢复系统啦。然而好不容易拉完屎沐完浴，回来发现还是原来的样子，WTF！！！\n念着晚上还得补作业，我已经完全放弃折腾了，何况网上所有中文，英文的方法都已经试了遍，心中已经断定是硬件出了问题。\n码农圈子里有句名言，如果一个bug你当下不能解决，那就去睡一觉，如果还不行，那就睡两觉。今天早上起来，无意中发现了Boom这个音效增强的软件，我完全是抱着软件测试的角度去玩的这个软件，然而当我调动均衡器的时候，神奇的事情发生了。。。破音没有了!!!!!!!!!\n作为音乐盲的我此刻完全不知道发生了什么，感觉找到了一个新大陆一样。我把均衡器的 125Hz - 500 Hz 的频段全部调到0，然后别的按照它最优的分布，刚好把破音的那个频段给屏蔽了，虽然在音质上会有些失真，然而对于我这种听音乐只是为了屏蔽环境噪音的屌丝来说完全没有分别。\n\n在网上看到还多人出现了同样的破音问题且无法找到解决方案，如果你能够搜到这篇文章，希望这种靠软件增强来弥补硬件缺失的方法能给你带来帮助。\n之所以把这个过程写下来，是因为一方面这的确是一种可以惠及他人的解决方案，如果你搜过Mac破音的解决方案，你就会知道有多少人遇到过这个问题而现存可行的方案几乎寥寥无几，而且这些方案只是针对一部分情况的。另一方面，是我在这个过程中的体验，简直像极了平时修bug的过程:\n\n定位问题，找到是软件问题还是硬件问题，或者两者的可能性大小\n谷歌解决方案，中文搜尽搜英文，用经验和已有知识对每个方案来个Page Rank，按排序一个个试过去，并做好可回滚的备份\n无法找到现有方案， 睡一觉\n起来找灵感，既然无法切实解决问题，就去尽可能伪装解决了问题(打补丁)\n欧也，虽然有瑕疵，但是好歹领导暂时发现不了这个隐藏问题啦~\n\n对， 这就是典型的中国特色软件工程。。。 233333\n","title_tokenize":["记","一次","解决","Mac","扬声器","破","音问","题","奇特","经历"],"content_tokenize":["昨天","正","兴高采烈","听","王健林","牛津大学","演讲","突然","扬声器","出现","破音","捣鼓","半天","开启","重","启","大法","开启","重置","NVRAM","大法","都","没","卵用","便","怀疑","更新","完","OSX","10.11.4","后","bug","妈","苹果","几次","软件","更新","谱","忍不住","会","去","跟风","升级","破","Mac","其实不","回","退","系统","问题是","使用","11.4","几天","以后","才","出现","说明","系统","缘由","可能性","不会","特别","高","启动","声音","都","出现","破音","就让","担心","是否是","硬件","出","问题","听","王健林","声音","开","大了","点","啊啊","啊啊","WTF","心怀","侥幸","觉得","硬件","没","可能","说","坏","坏","看到","三天","前","恰好","Time","Machine","备份","一下","心","1","横","决定","重新","恢复","系统","好不","容易","拉","完屎沐完浴","回来","发现","原来","样子","WTF","念","晚上","还","补","作业","已","完全","放弃","折腾","网上","所有","中文","英文","方法","都","已","试","遍","心中","已","判定","硬件","出","问题","码农","圈子","里","句","名言","bug","当下","不能","解决","去","睡一觉","还","不行","睡","两","觉","今天","早上","起来","无","意中","发现","Boom","音效","增强","软件","完全","抱","软件","测试","角度","去","玩","这个软件","调动","均衡器","神奇的","事情","产生","破音","没","有了","音乐","盲","此刻","完全","不知道","产生","感觉","找","到了","新大陆","均衡","器","125","Hz","500","Hz","频段","全部","调到","0","最优","散布","恰好","破音","频段","屏蔽","音质","上","会","失真","这类","听音乐","屏蔽","环境","噪音","屌丝","来讲","完全","没有","分别","网上","看到","还","多人","出现","破","音问","题","没法","找到","解决方案","能够","搜","这篇文章","希望","这类","软件","增强","弥补","硬件","缺失","方法","给你","带来","帮助","进程","写下来","的确","一种","惠及","解决方案","搜","Mac","破音","解决方案","会","知道","人","遇到","这个问题","现存","可行","方案","几近","寥寥无几","方案","针对","一部分","情况","进程","中的","体验","简直","平时","修","bug","进程","定位","问题","找到","软件","问题","硬件","问题","二者","可能性","大小","谷歌","解决","方案","中文","搜","搜","英文","经验","已有","知识","每一个","方案","Page","Rank","排序","一个个","试","过去","做好","回","滚","备份","没法","找到","现有","方案","睡一觉","起来","找","灵感","没法","切实","解决","问题","去","尽可能","假装","解决","问题","补钉","欧也","瑕疵","好歹","领导","暂时","发现","不了","隐藏","问题","典型","中国","特点","软件工程","233333"]},{"title":"Hexo折腾记——统计与交互篇","url":"https://joway.wang/posts/Hexo/2016-03-25-hexo-analysis.html","content":"前言前面说到，由于天朝的网络原因， 导致 Google Analytics 和 Disqus 的js加载特别慢，但是又不能去掉最最基本的统计与用户交互功能，国内的百度统计和多说都做的很垃圾，多说其实还不错，就是评论者头像是加载原登陆站点的，不支持https，还老是发抽。偶然看到大神的 CodeVS 用了Growing 来作统计分析，用了DaoVoice来进行用户反馈，觉得比谷歌分析友好多了，于是便拿来耍了几下。\n\n配置Growing网址 : Growing.io\n进去注册以后，它会让你选择平台(网站/安卓/ios)，选择网站(如果选择app，则要在app内编码)，分配给你一个js脚本，把它放在网页中就行了。\n我是放在模板文件的footer.ejs中。这样每个页面都会加载。\ngrowing 的优势在于，它不仅仅能统计用户的访问，还能统计用户什么时间点击了什么链结。\n\n配置 DaoVoice网址: DaoVoice\n进入并登陆后，有如下页面:\n\n选择访客接入(除非你有自己的用户模块)\n待你把上面的js脚本放到网站上并生效后，会自动跳到下一步，然后就能在页面显示我博客右下角的小图标啦。~\n可以在后台配置图标样式，以及回复用户反馈~\nPS: DaoVoice并不能替代评论功能，但是可以作为一个不错的交(gao)友(ji)平台(虽然它本来是用来反馈意见的233333)\n配置 OneApm网址: oneapm\n一个很好的分析应用和服务器性能详尽情况的工具，安装简单，即插即用\n\n\n\n\n","title_tokenize":["Hexo","折腾","记","统计","交互","篇"],"content_tokenize":["前言","前面","说到","天朝","网络","缘由","导致","Google","Analytics","Disqus","js","加载","特别","慢","不能","去掉","最最","基本的","统计","用户","交互","功能","国内","百度","统计","说","都","做","很","垃圾","说","其实","还","不错","评论","头像","加载","原","登陆","站点","不支持","https","还","总是","发","抽","偶然","看到","大神","CodeVS","Growing","作","统计分析","DaoVoice","进行","用户","反馈","觉得","谷歌","分析","友好","便","拿来","耍","下","配置","Growing","网址","Growing","io","进去","注册","以后","会","选择","平台","网站","安","卓/","ios","选择","网站","选择","app","则要","app","内","编码","分","配给","js","脚本","放","网页","中","行","我是","放","模板","文件","footer","ejs","中","每一个","页面","都会","加载","growing","优势","在于","不单单","统计","用户","访问","还","统计","用户","时间","点击","链结","配置","DaoVoice","网址","DaoVoice","进入","登陆","后","有如","下","页面","选择","访客","接入","用户","模块","上面","js","脚本","放到","网站","上","生效","后","会","自动","跳","下一步","页面","显示","博客","右下角","小","图标","后台","配置","图标","样式","回复","用户","反馈","PS","DaoVoice","其实不","替换","评论","功能","不错","交","gao","友","ji","平台","本来","用来","反馈","意见","233333","配置","OneApm","网址","oneapm","很好","分析","运用","服务器","性能","详实","情况","工具","安装","简单","即插即用"]},{"title":"Hexo 折腾记——自动部署篇","url":"https://joway.wang/posts/Hexo/2016-03-19-Hexo-deploy.html","content":"目标:写完一键上传并部署。(一个命令完成)\n详细流程:上传图片至七牛，上传 deploy 文件至Github公开库 以及 博客源代码 至Github 私有库，Daocloud 检测到commit 自动构建镜像并自动更新应用。\n\n实现:\n在public目录下放置Dockerfile文件:\n\n12FROM daocloud.io/nginxCOPY ./ /usr/share/nginx/html\n\n在Daocloud里，创建新的代码构建，并设置成检测到commit就自动构建，再用这个镜像创建新应用，并设置自动更新\n\nhexo根目录下创建 update.sh \n\n\n(Mac/Linux下需修改执行权限: sudo chown 755 ./update.sh， Windows 需改成对应的bat脚本)\n1234567891011121314151617181920212223#!/bin/sh# author: joway# 如果参数个数不等于0if test $# -gt 0then  if test $1 = '-img'  then    cd ./source/photos/    node photo-tool.js    cd ../../    echo 'Upload complete'  else    echo 'Parameter error'  fielse  echo 'No image needs upload'fihexo cleanhexo g && gulphexo deploygit add .git commit -m 'update backup'git push origin master\n命令使用:\n # 需要上传图片\n./update.sh -img  \n#图片没改动， 只上传站点文件\n./update.sh\n\n\n相关文章:\nHexo折腾记——基本配置篇\nHexo折腾记——性能优化篇\n","title_tokenize":["Hexo","折腾","记","自动","部署","篇"],"content_tokenize":["目标","写完","1","键","上传","部署","命令","完成","详细","流程","上传","图片","7","牛","上传","deploy","文件","Github","公然","库","博客","源代码","Github","私有","库","Daocloud","检测","commit","自动","构建","镜","自动更新","运用","实现","public","目录","下","放置","Dockerfile","文件","12","FROM","daocloud","io","nginxCOPY","usr","share","nginx","html","Daocloud","里","创建","新的","代码","构建","设置","成","检测","commit","自动","构建","再用","镜","创建","新","运用","设置","自动更新","hexo","根目录","下","创建","update","sh","Mac","Linux","下","需","修改","实行","权限","sudo","chown","755","update","sh","Windows","需","改成","对应","bat","脚本","1234567891011121314151617181920212223","bin","sh","author","joway","参数","个数","不等","0","if","test","gt","0","then","if","test","1","img","then","cd","source","photos","node","photo","tool","js","cd","echo","Upload","complete","else","echo","Parameter","error","fielse","echo","No","image","needs","upload","fihexo","cleanhexo","g","gulphexo","deploygit","add","git","commit","m","update","backup","git","push","origin","master","命令","使用","需要","上传","图片","update","sh","img","图片","没","改动","只","上传","站点","文件","update","sh","相干","文章","Hexo","折腾","记","基本","配置","篇","Hexo","折腾","记","性能","优化","篇"]},{"title":"Hexo折腾记——性能优化篇","url":"https://joway.wang/posts/Hexo/2016-03-19-Hexo-optimize.html","content":"折腾Hexo的本来目的就是为了学习把性能优化到极致，由于水平有限，这里牵涉到的所谓的性能优化仅仅只是一些表面工夫，并不牵涉非常细节的前端性能。\n另外，由于我朝特殊的网络环境，我使用的谷歌分析，以及Disqus 均会导致出现因时因地因运营商而异的发抽状况，故而所有速度测试均在排除这些干扰下进行的。\n\n静态文件压缩静态文件包括: html,css,js,images . 我才用了gulp来跑自动压缩任务 。具体方法如下:\n\nnpm 安装如下工具, 方法皆为 : npm install xxx –save\n\n123456\"gulp\": \"^3.9.1\",\"gulp-htmlclean\": \"^2.7.6\",\"gulp-htmlmin\": \"^1.3.0\",\"gulp-imagemin\": \"^2.4.0\",\"gulp-minify-css\": \"^1.2.4\",\"gulp-uglify\": \"^1.5.3\",\n\n建立 gulpfile.js 文件\n\n123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354var gulp = require('gulp');var minifycss = require('gulp-minify-css');var uglify = require('gulp-uglify');var htmlmin = require('gulp-htmlmin');var htmlclean = require('gulp-htmlclean');// 获取 gulp-imagemin 模块var imagemin = require('gulp-imagemin')// 压缩 public 目录 cssgulp.task('minify-css', function() {    return gulp.src('./public/**/*.css')        .pipe(minifycss())        .pipe(gulp.dest('./public'));});// 压缩 public 目录 htmlgulp.task('minify-html', function() {  return gulp.src('./public/**/*.html')    .pipe(htmlclean())    .pipe(htmlmin({         removeComments: true,         minifyJS: true,         minifyCSS: true,         minifyURLs: true,    }))    .pipe(gulp.dest('./public'))});// 压缩 public/js 目录 jsgulp.task('minify-js', function() {    return gulp.src('./public/**/*.js')        .pipe(uglify())        .pipe(gulp.dest('./public'));});// 压缩图片任务// 在命令行输入 gulp images 启动此任务gulp.task('images', function () {    // 1. 找到图片    gulp.src('./photos/*.*')    // 2. 压缩图片        .pipe(imagemin({            progressive: true        }))    // 3. 另存图片        .pipe(gulp.dest('dist/images'))});// 执行 gulp 命令时执行的任务gulp.task('default', [    'minify-html','minify-css','minify-js','images']);\n注意， 修改上面的各个目录为你的真实目录， ** 代表0或多个子目录\n\n执行 gulp ，即可自动压缩所有静态文件\n\nCDN 接入上面的静态文件压缩幅度有限，要先提升下载速率还需要CDN的支持 。 理论上最佳方案是把所有静态文件都放在CDN上，但是由于hexo各处都在调用内部的js/css，如果需要改动，工程量会比较大，后期维护也不是很方便。不知道以后Hexo会不会原生提供一个配置静态资源地址的选项。\n所以我这里只将图片放在了七牛CDN上，hexo 有一个七牛的插件 : hexo-qiniu-sync 。 但是不知道为什么， 我在我电脑上跑不来这个，我看网上也有人说这个插件有许多bug，于是我就自己写了个脚本(本来想写插件，但是并没有研究过hexo的插件该如何写，所以暂时放弃了，后期有时间尝试下吧)。\n我的需求很简单，我有一个相册的页面，里面可能会放许多图片，我只想要一个脚本，能过一键上传所有图片然后把url全部写进我的相册界面里。具体实现思路参见 Hexo 折腾记(基本配置篇) 。\n一键上传所有文件至七牛的Node 脚本在Github上: https://github.com/joway/qiniu_upload_node\nInstantClick 黑科技说到性能优化，有一个黑科技虽然不是特别优雅，但是提升的速度却是立杆见影且惊人的，那就是 InstantClick 。\nInstantClick 的思路非常巧妙，它利用鼠标点击链接前的短暂时间(统计说是平均400ms)进行预加载，从而在感观上实现了迅速打开页面的效果。当你在打开页面的时候，其实页面已经加载到本地了，也就会很快能个完成渲染。\nInstantClick 并不能滥用，许多js无法与它兼容，比如 谷歌分析，百度统计，另外还有fancybox 。故而它有两种启用方式:\n\n白名单方式:\n\n初始化:\n12script src=\"instantclick.min.js\"data-no-instant>script>script data-no-instant>InstantClick.init(true);script>\n针对具体每个链接启动:\n1a href=\"/blog/\" data-instant>Bloga>\n\n黑名单方式:\n\n初始化，以及解决部分js无法加载的问题:\n12345678910111213141516script src=\"/js/instantclick.min.js\" data-no-instant>script>script data-no-instant>InstantClick.on('change', function(isInitialLoad) {  if (isInitialLoad === false) {    if (typeof MathJax !== 'undefined') // support MathJax      MathJax.Hub.Queue([\"Typeset\",MathJax.Hub]);    if (typeof prettyPrint !== 'undefined') // support google code prettify      prettyPrint();    if (typeof _hmt !== 'undefined')  // support 百度统计      _hmt.push(['_trackPageview', location.pathname + location.search]);    if (typeof ga !== 'undefined')  // support google analytics        ga('send', 'pageview', location.pathname + location.search);  }});InstantClick.init();script>\n这时候对于所有链接都开启 预加载模式，但是可以针对部分链接假如黑名单:\n1a href=\"/blog/\" data-no-instant>Bloga>\n这里我遇到的一个坑是，我的相册使用了fancybox，而对于InstantClick死活无法解决fancybox的问题(网上也没解决方案)，虽然我可以通过指定data-no-instant来达到不预加载的目的，但是hexo对于每个同级链接都是一样对待的，我如何让它单单对于相册不进行预加载呢?\n我能够想到的方法就是对导航栏的每一个url指定一个以其中文名(暂时不映射成英文)命名的id值，然后待页面渲染完了以后，对id值为’相册’的元素添加 data-no-instant 属性:\n1$(\"#相册\").attr(\"data-no-instant\",'');\n有些时候这种加黑名单的方法也没用，那么就用最后一招，强制刷新（自己调试出来的，略土。。） :\n123document.getElementById('相册').onclick = function(e){ \tlocation.href = document.getElementById('相册').href;}\nNginx 优化配置Gzip压缩:\n12345678910111213141516http {    gzip               on;    gzip_vary          on;    gzip_comp_level    6;    gzip_buffers       16 8k;    gzip_min_length    1000;    gzip_proxied       any;    gzip_disable       \"msie6\";    gzip_http_version  1.0;    gzip_types         text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript;    ... ...}\n搜索引擎优化(SEO)添加百度主动推送代码，让搜索引擎最快发现文章 .\n方法: 在 /themes/yilia/layout/_partial/article.ejs 的尾部评论位置, 添加:\n12345678910% if (!index){ %>script>(function(){    var bp = document.createElement('script');    bp.src = '//push.zhanzhang.baidu.com/push.js';    var s = document.getElementsByTagName(\"script\")[0];    s.parentNode.insertBefore(bp, s);})();script>     % } %>\n之后，每次用户访问界面，都会去调用推送代码\n\n相关文章:\nHexo折腾记——基本配置篇\nHexo折腾记——自动部署篇\n","title_tokenize":["Hexo","折腾","记","性能","优化","篇"],"content_tokenize":["折腾","Hexo","本来","目的","学习","性能","优化","极致","水平","有限","牵涉","所谓","性能","优化","仅仅","表面","工夫","其实不","牵涉","非常","细节","前端","性能","特殊的","网络","环境","使用","谷歌","分析","Disqus","均","会","导致","出现","时","运营商","异","发","抽","状态","故而","所有","速度","测试","均","排除","干扰","下","进行","静态","文件","紧缩","静态","文件","包括","html","css","js","images","才","gulp","跑","自动","紧缩","任务","具体","方法","以下","npm","安装","以下","工具","方","法","皆","npm","install","xxx","–","save","123456","gulp","3.9.1","gulp","htmlclean","2.7.6","gulp","htmlmin","1.3.0","gulp","imagemin","2.4.0","gulp","minify","css","1.2.4","gulp","uglify","1.5.3","建立","gulpfile","js","文件","123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354","var","gulp","require","gulp","var","minifycss","require","gulp","minify","css","var","uglify","require","gulp","uglify","var","htmlmin","require","gulp","htmlmin","var","htmlclean","require","gulp","htmlclean","取得","gulp","imagemin","模块","var","imagemin","require","gulp","imagemin","紧缩","public","目录","cssgulp","task","minify","css","function","return","gulp","src","public","css","pipe","minifycss","pipe","gulp","dest","public","紧缩","public","目录","htmlgulp","task","minify","html","function","return","gulp","src","public","html","pipe","htmlclean","pipe","htmlmin","removeComments","true","minifyJS","true","minifyCSS","true","minifyURLs","true","pipe","gulp","dest","public","紧缩","public","js","目录","jsgulp","task","minify","js","function","return","gulp","src","public","js","pipe","uglify","pipe","gulp","dest","public","紧缩","图片","任务","命令行","输入","gulp","images","启动","任务","gulp","task","images","function","1","找到","图片","gulp","src","photos","2","紧缩","图片","pipe","imagemin","progressive","true","3","存","图片","pipe","gulp","dest","dist","images","实行","gulp","命令","时","实行","任务","gulp","task","default","minify","html","minify","css","minify","js","images","注意","修改","上面","目录","真实","目录","代表","0","子目","录","实行","gulp","即可","自动","紧缩","所有","静态","文件","CDN","接入","上面","静态","文件","紧缩","幅度","有限","先","提升","下载","速率","还","需要","CDN","支","持","理论上","最好","方案","所有","静态","文件","都","放","CDN","上","hexo","各处","都","调用","内部","js","css","需要","改动","工程量","会","较大","后期","保护","也不","很","方便","不知道","以后","Hexo","会不会","原生","提供","配置","静态","资源","地址","选项","只","图片","放","7","牛","CDN","上","hexo","7","牛","插件","hexo","qiniu","sync","不知道","电脑","上","跑","不","看","网上","有人","说","插件","bug","写","脚本","本来","想","写","插件","并没有","研究","hexo","插件","写","暂时","放弃","后期","时间","尝试","下","需求","很","简单","相册","页面","里面","可能会","放","图片","只","想要","脚本","1","键","上传","所有","图片","url","全部","写","进","相册","界面","里","具体","实现","思路","参见","Hexo","折腾","记","基本","配置","篇","1","键","上传","所有","文件","7","牛","Node","脚本","Github","上","https://github.com/joway/qiniu_upload_node","InstantClick","黑","科技","说到","性能","优化","黑","科技","不是","特别","优雅","提升","速度","却","立杆见影","惊人的","那就是","InstantClick","InstantClick","思路","非常","奇妙","利用","鼠标","点击","链接","前","短暂","时间","统计","说是","平均","400","ms","进行","预","加载","感观","上","实现","迅速","打开","页面","效果","打开","页面","其实","页面","已","加载","本地","会","很快","完成","渲染","InstantClick","其实不","滥用","js","没法","兼容","谷歌","分析","百度","统计","fancybox","故而","两种","启用","方式","白名单","方式","初始化","12","script","src","instantclick","min","js","data","no","instant","script","script","data","no","instant","InstantClick","init","true","script","针对","具体","每一个","链接","启动","1","a","href","blog","data","instant","Bloga","黑名单","方式","初始化","解决","部份","js","没法","加载","问题","12345678910111213141516","script","src","js","instantclick","min","js","data","no","instant","script","script","data","no","instant","InstantClick","on","change","function","isInitialLoad","if","isInitialLoad","false","if","typeof","MathJax","undefined","support","MathJax","MathJax","Hub","Queue","Typeset","MathJax","Hub","if","typeof","prettyPrint","undefined","support","google","code","prettify","prettyPrint","if","typeof","hmt","undefined","support","百度","统计","hmt","push","trackPageview","location","pathname","location","search","if","typeof","ga","undefined","support","google","analytics","ga","send","pageview","location","pathname","location","search","InstantClick","init","script","这时候","所有","链接","都","开启","预","加载","模式","针对","部份","链接","假定","黑名单","1","a","href","blog","data","no","instant","Bloga","遇到","坑","相册","使用","fancybox","InstantClick","死活","没法","解决","fancybox","问题","网上","没","解决","方案","指定","data","no","instant","到达","不","预","加载","目的","hexo","每一个","同级","链接","都是","对待","单单","相册","不","进行","预","加载","能够","想到","方法","导航","栏","每一个","url","指定","以其","中文","名","暂时","不","映照","成","英文","命名","id","值","页面","渲染","完了","以后","id","值","相册","元素","添加","data","no","instant","属性","1","相册","attr","data","no","instant","这类","加","黑名单","方法","没用","那末","最后","1","招","强制","刷新","调试","出来","略","土","123","document","getElementById","相册","onclick","function","e","location","href","document","getElementById","相册","href","Nginx","优化","配置","Gzip","紧缩","12345678910111213141516","http","gzip","on","gzip","vary","on","gzip","comp","level","6","gzip","buffers","16","8","k","gzip","min","length","1000","gzip","proxied","any","gzip","disable","msie","6","gzip","http","version","1.0","gzip","types","text","plain","text","css","application","json","application","x","javascript","text","xml","application","xml","application","xml","rss","text","javascript","application","javascript","搜索","引擎","优化","SEO","添加","百度","主动","推送","代码","搜索","引擎","最快","发现","文章","方法","themes","yilia","layout","partial","article","ejs","尾部","评论","位置","添加","12345678910%","if","index","script","function","var","bp","document","createElement","script","bp","src","push","zhanzhang","baidu","com","push","js","var","s","document","getElementsByTagName","script","0","s","parent","Node","insertBefore","bp","s","script","以后","每次","用户","访问","界面","都会","去","调用","推送","代码","相干","文章","Hexo","折腾","记","基本","配置","篇","Hexo","折腾","记","自动","部署","篇"]},{"title":"Hexo折腾记——基本配置篇","url":"https://joway.wang/posts/Hexo/2016-03-18-hexo-base.html","content":"前言人闲起来真是可怕，本来已经折腾过了jekyll和Ghost，静态和动态博客也都尝了遍鲜，然而还是按捺不住寂寞又折腾起来Hexo。话说我最早大概是两年前高考结束的时候知道的Hexo，那时在家里没事干想搭个博客玩，然后看见了jekyll和hexo，无奈那时候就一台windows，啥也不懂啥也不会，这两个博客工具楞是装不上去。而Jekyll的一个好处是可以不用在本地跑，Github 的Pages功能原生支持Jekyll，所以我只需要下载些别人的源文件，自己随便修改下，传到Github就能在线调试和运行了。\n\n这次尝试Hexo的另一个原因是，想重头学习下这些工具的原理和逻辑，另外再添加些可以将性能发挥到极致的黑科技(下文会有介绍)。\n至于Hexo如何安装配置，网上有太多教程了，可以直接按照文档操作 。 这里只作为进阶，列举一些进阶配置以及踩过的坑。\nPS ： 我用的Hexo 版本是3.2, 主题是 yilia\n以下功能可能需要插件支持，我的package.json为:\n12345678910111213141516171819202122232425262728293031{  \"name\": \"hexo-site\",  \"version\": \"0.0.0\",  \"private\": true,  \"hexo\": {    \"version\": \"3.2.0\"  },  \"dependencies\": {    \"gulp\": \"^3.9.1\",    \"gulp-htmlclean\": \"^2.7.6\",    \"gulp-htmlmin\": \"^1.3.0\",    \"gulp-imagemin\": \"^2.4.0\",    \"gulp-minify-css\": \"^1.2.4\",    \"gulp-uglify\": \"^1.5.3\",    \"hexo\": \"^3.2.0\",    \"hexo-deployer-git\": \"0.0.4\",    \"hexo-generator-archive\": \"^0.1.4\",    \"hexo-generator-category\": \"^0.1.3\",    \"hexo-generator-feed\": \"^1.0.2\",    \"hexo-generator-index\": \"^0.2.0\",    \"hexo-generator-sitemap\": \"^1.1.2\",    \"hexo-generator-tag\": \"^0.2.0\",    \"hexo-migrator-rss\": \"^0.1.2\",    \"hexo-renderer-ejs\": \"^0.2.0\",    \"hexo-renderer-marked\": \"^0.2.10\",    \"hexo-renderer-stylus\": \"^0.3.1\",    \"hexo-server\": \"^0.2.0\",    \"jgallery\": \"^1.5.4\",    \"qiniu\": \"^6.1.9\"  }}\n文章永久链接默认文章链结是以: http://xxx.com/2015/07/06/your-title/ 的格式的， 个人不是很喜欢这样的格式，而且末尾没有.html结尾有点动态页面的感觉，对搜索引擎是否友好也有疑问(如果你知道答案，请告诉我)，于是，我改成了 http://xxx.com/posts/programming/2016-03-18-hello-world.html 这样的格式，具体方法是在 根目录下的 _config.yml 文件里:\npermalink: posts/:category/:year-:month-:day-:title.html\n开启目录支持我本人并不是很喜欢以tag来分类文章的方式，但是hexo默认是以tag来分类的，于是我另外给它加了一个种类(Category)的选项，方法是在_config.yml 下:\ndefault_category: uncategorized\ncategory_map:\n    编程: programming\n    生活: life\n    其他: other\n其中, category_map 是为了让url中尽量少出现中文，做的映射。 \n例如:在文章开头，标柱目录为:\n---\nxxx: xxx\ncategories: 编程\n---\n则在url中， 会变成: \n.../posts/programming/xxx.html\n文章目录默认不开启文章目录，若要开启:\n---\nxxx: xxx\ntoc: true\n---\n会自动根据标题权重进行目录生成。显示在最右边。 如需要更改格式， 可去 …/yilia/layout/_partial/archive.ejs 中修改\n相册一直很想要一个靠谱，方便，而且快捷的相册功能，以前用Jekyll的时候没弄懂如何动态生成界面，就直接用html写了一个相册界面，然后还用VC++写了一个windows下的把某个文件夹下所有图片名检索并自动生成相应的html相册页面的小工具，后来玩Ghost了， 天真地想把发布图片的功能集成到原生的管理面版上，然后最后还是失败了。\n这次折腾hexo，我下定决心了一定要把相册功能给实现了!(然后我就浪费了一个下午 :( \n一开始贪图方便，使用 yilian 主题 自带的 基于instagram API的相册展示功能，本来还想着如果instagram被墙，试试看反代它的地址来实现功能，后来发现我申请的client_id 死活不能用我也是醉了，最后腾了半天还弄不好我也就放弃了。\n于是想自己造轮子，思路很简单，把照片全部放在本地某个目录下，然后跑个Python或者Node脚本把所有文件上传到某个地方(github/七牛)，并把这些文件名全部保存为output.json 文件，之后相册页面通过get 这个json文件，来得到对应的所有照片url，生成界面。(这个流程参照了网上另一位仁兄的实现，然后我找不到链接了…下次找到了补充上来)\n看了下七牛的Node SDK 文档，发现都不用写多少代码，直接能照着文档用，于是改了改，放在本地一键运行，成功!\n一键上传七牛以及输出文件名json的代码如下:\n1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586const fs = require(\"fs\");const path = \"../../photos\";var qiniu = require(\"qiniu\");//需要填写你的 Access Key 和 Secret Keyqiniu.conf.ACCESS_KEY = 'xxx';qiniu.conf.SECRET_KEY = 'xxx';//要上传的空间bucket = 'hexo';//构建上传策略函数function uptoken(bucket, key) {  var putPolicy = new qiniu.rs.PutPolicy(bucket+\":\"+key);  return putPolicy.token();}//构造上传函数function uploadFile(uptoken, key, localFile) {    var extra = new qiniu.io.PutExtra();    qiniu.io.putFile(uptoken, key, localFile, extra, function(err, ret) {      if(!err) {        // 上传成功， 处理返回值        console.log('upload success : ',ret.hash, ret.key);      } else {        // 上传失败， 处理返回代码        console.log(err);      }  });}/** * 读取文件后缀名称，并转化成小写 * @param file_name * @returns */function getFilenameSuffix(file_name) {  if(file_name=='.DS_Store'){    return '.DS_Store';  }    if (file_name == null || file_name.length == 0)        return null;    var result = /\\.[^\\.]+/.exec(file_name);    return result == null ? null : (result + \"\").toLowerCase();}fs.readdir(path, function (err, files) {    if (err) {        return;    }    var arr = [];    (function iterator(index) {        if (index == files.length) {            fs.writeFile(\"./output.json\", JSON.stringify(arr, null, \"\\t\"));            return;        }        fs.stat(path + \"/\" + files[index], function (err, stats) {            if (err) {                return;            }            if (stats.isFile()) {              var suffix = getFilenameSuffix(files[index]);              if(!(suffix=='.js'|| suffix == '.DS_Store')){                //要上传文件的本地路径                filePath = path+'/'+files[index];                console.log('抓取到文件: '+files[index]);                //上传到七牛后保存的文件名                key = files[index];                //生成上传 Token                token = uptoken(bucket, key);                // 异步执行                uploadFile(token, key, filePath);                arr.push(files[index]);            }                      }            iterator(index + 1);        })    }(0));});\n一键部署全局 _config.yml 中，设置:\ndeploy:\n  type: git\n  repository: https://github.com/joway/hexo-blog.git\n  branch: master\n执行\nhexo deploy\n即可上传至git 仓库\n\n相关文章:\nHexo折腾记——性能优化篇\nHexo折腾记——自动部署篇\n","title_tokenize":["Hexo","折腾","记","基本","配置","篇"],"content_tokenize":["前言","人闲","起来","真是","可怕","本来","已","折腾","jekyll","Ghost","静态","动态","博客","都","尝","遍","鲜","抑制","不住","孤单","折腾","起来","Hexo","话说","最早","大概是","两","年前","高考","结束","知道","Hexo","在家","里","没事","干","想搭","博客","玩","看见","jekyll","hexo","无奈","那时候","一台","windows","不懂","不会","两个","博客","工具","楞","装","不","上去","Jekyll","好处","不用","本地","跑","Github","Pages","功能","原生","支持","Jekyll","只","需要","下载","些","源文件","随便","修改","下","传到","Github","在线","调试","运行","这次","尝试","Hexo","另一个","缘由","想","重头","学习","下","工具","原理","逻辑","再","添加","些","性能","发挥","极致","黑","科技","下文","会","介绍","Hexo","安装","配置","网上","太多","教程","直接","文档","操作","只","进阶","罗列","进阶","配置","踩","坑","PS","Hexo","版本","3.2","主题","yilia","以下","功能","可能","需要","插件","支持","package","json","12345678910111213141516171819202122232425262728293031","name","hexo","site","version","0.0.0","private","true","hexo","version","3.2.0","dependencies","gulp","3.9.1","gulp","htmlclean","2.7.6","gulp","htmlmin","1.3.0","gulp","imagemin","2.4.0","gulp","minify","css","1.2.4","gulp","uglify","1.5.3","hexo","3.2.0","hexo","deployer","git","0.0.4","hexo","generator","archive","0.1.4","hexo","generator","category","0.1.3","hexo","generator","feed","1.0.2","hexo","generator","index","0.2.0","hexo","generator","sitemap","1.1.2","hexo","generator","tag","0.2.0","hexo","migrator","rss","0.1.2","hexo","renderer","ejs","0.2.0","hexo","renderer","marked","0.2.10","hexo","renderer","stylus","0.3.1","hexo","server","0.2.0","jgallery","1.5.4","qiniu","6.1.9","文章","永久","链接","默许","文章","链结","是以","http://xxx.com/2015/07/06/your-title/","格式","个人","不是","很喜欢","格式","末尾","没有","html","结尾","有点","动态","页面","感觉","搜索引擎","是否是","友好","疑问","知道","答案","请","告诉我","改成","http://xxx.com/posts/programming/2016-03-18-hello-world.html","格式","具体","方法","根目录","下","config","yml","文件","里","permalink","posts","category","year","month","day","title","html","开启","目录","支持","本人","其实不","很喜欢","tag","分类","文章","方式","hexo","默许","是以","tag","分类","加","种类","Category","选项","方法","config","yml","下","default","category","uncategorized","category","map","编程","programming","生活","life","other","中","category","map","url","中","尽可能","少","出现","中文","做","映照","文章","开头","标柱","目录","xxx","xxx","categories","编程","url","中","会","变成","posts","programming","xxx","html","文章","目录","默许","不","开启","文章","目录","若要","开启","xxx","xxx","toc","true","会","自动","标题","权重","进行","目录","生成","显示","最","右侧","需要","更改","格式","去","yilia","layout","partial","archive","ejs","中","修改","相册","很想","谱","方便","快捷的","相册","功能","之前","Jekyll","没","弄懂","动态","生成","界面","直接","html","写","相册","界面","还","V","C++","写","windows","下","文件夹","下","所有","图片","名","检索","自动","生成","相应","html","相册","页面","小工","具","后来","玩","Ghost","天真地","想","发布","图片","功能","集成","原生","管理","面","版","上","最后","失败","这次","折腾","hexo","下定决心","一定要","相册","功能","实现","浪费","下午","一开始","贪图","方便","使用","yilian","主题","带","基于","instagram","API","相册","展现","功能","本来","还","想着","instagram","墙","试试看","反","代","地址","实现","功能","后来","发现","申请","client","id","死活","不","能用","也是","醉","最后","半天","还","弄","不好","放弃","想","造","轮子","思路","很","简单","照片","全部","放","本地","目录","下","跑","Python","Node","脚本","所有","文件","上传","地方","github","7","牛","并把","文件名","全部","保存","output","json","文件","以后","相册","页面","get","json","文件","得到","对应","所有","照片","url","生成","界面","流程","参照","网上","另一位","仁兄","实现","找不到","链接","下次","找","到了","补充","上来","看","下","7","牛","Node","SDK","文档","发现","都","不用","写","代码","直接","文档","改","改","放","本地","1","键","运行","成功","1","键","上传","7","牛","输出","文件名","json","代码","以下","1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586","const","fs","require","fs","const","path","photos","var","qiniu","require","qiniu","需要","填写","Access","Key","Secret","Keyqiniu","conf","ACCESS","KEY","xxx","qiniu","conf","SECRET","KEY","xxx","上传","空间","bucket","hexo","构建","上传","策略","函数","function","uptoken","bucket","key","var","putPolicy","new","qiniu","rs","PutPolicy","bucket","key","return","putPolicy","token","构造","上传","函数","function","uploadFile","uptoken","key","localFile","var","extra","new","qiniu","io","PutExtra","qiniu","io","putFile","uptoken","key","localFile","extra","function","err","ret","if","err","上传","成功","处理","返回","值","console","log","upload","success","ret","hash","ret","key","else","上传","失败","处理","返回","代码","console","log","err","读取","文件","后缀","名称","转化","成","小写","param","file","name","returns","function","getFilenameSuffix","file","name","if","file","name","DS","Store","return","DS","Store","if","file","name","null","file","name","length","0","return","null","var","result","exec","file","name","return","result","null","null","result","toLowerCase","fs","readdir","path","function","err","files","if","err","return","var","arr","function","iterator","index","if","index","files","length","fs","writeFile","output","json","JSON","stringify","arr","null","t","return","fs","stat","path","files","index","function","err","stats","if","err","return","if","stats","isFile","var","suffix","getFilenameSuffix","files","index","if","suffix","js","suffix","DS","Store","上传","文件","本地","路径","filePath","path","files","index","console","log","抓取","文件","files","index","上传","7","牛","后","保存","文件名","key","files","index","生成","上传","Token","token","uptoken","bucket","key","异步","实行","uploadFile","token","key","filePath","arr","push","files","index","iterator","index","1","0","1","键","部署","全局","config","yml","中","设置","deploy","type","git","repository","https://github.com/joway/hexo-blog.git","branch","master","实行","hexo","deploy","即可","上传","git","仓库","相干","文章","Hexo","折腾","记","性能","优化","篇","Hexo","折腾","记","自动","部署","篇"]},{"title":"我的滑板鞋-艺术-其它","url":"https://joway.wang/posts/随感/2016-02-01-我的滑板鞋-艺术-其它.html","content":"\n有些事我都已忘记\n但我现在还记得\n在一个晚上 我的母亲问我\n今天怎么不开心\n我说在我的想象中 有一双滑板鞋\n\n与众不同最时尚 跳舞肯定棒\n整个城市找遍所有的街 都没有\n她说将来会找到的\n时间 时间 会给我答案\n星期天我再次寻找依然没有发现\n一个月后我去了第二个城市\n这里的人们称它为魅力之都\n时间过得很快夜幕就要降临\n我想我必须要离开\n当我正要走时我看到一家专卖店\n那就是我要的滑板鞋\n我的滑板鞋时尚时尚最时尚\n回家的路上我情不自禁\n摩擦 摩擦\n在这光滑的地上摩擦\n月光下我看到自己的身影\n有时很远有时很近\n感到一种力量驱使我的脚步\n有了滑板鞋 天黑都不怕\n一步两步 一步两步\n一步一步似爪牙\n是魔鬼的步伐\n摩擦 摩擦\n我给自己打着节拍\n这是我生命中美好的时刻\n我要完成我最喜欢的舞蹈\n在这美丽的月光下\n在这美丽的街道上\n我告诉自己这是真的 这不是梦\n一步两步 一步两步\n一步一步似爪牙\n是魔鬼的步伐\n\n当年>刚出来的时候, 我和许多人一样, 都带着嘲讽看着这首歌, 看着这歌背后的那个杀马特青年 . 我以为它就和凤凰传奇那种是一路的货色. 后来>杂志有一篇采访庞麦郎文章, 讲他如何违约,如何幼稚,如何土 , 我也就笑笑过去了 . \n昨天不知道如何就重新听到了这首歌, 瞬间被震撼了 . 尼尔.波兹曼说, 娱乐至死 . 毫无疑问, 这首歌就是一个大众娱乐出来的产物, 甚至于这个歌的编曲者就是论坛一个网友凑巧路过自娱自乐给谱的曲 . 但是娱乐并没有贬低这首歌的价值, 相反, 许多人听到这首歌的时候会去嘲笑, 但是仔细想想, 你真的是在嘲笑这首歌吗? 与韩寒的许多书一样, 这些东西或许在所谓的艺术上并没有多少技术含量, 也不应该得到那么多人的追捧. 但是从这些东西里, 其实我们都能够看到我们自己, 以及这个时代真切的样子 .  \n韩寒和庞麦郎都是小镇青年, 向着星辰大海奔跑 . 不同的是, 韩寒明显情商与智商更高于庞麦郎, 而庞麦郎只是至始至终都停留在了他小镇青年的桎梏里 . 庞麦郎自己也不想被桎梏于小镇, 甚至都不想桎梏于中国,  于是他谎称自己是台湾基隆人, 还要在MV里加入各种欧美元素, 还是典型的国内土豪意淫版本的欧美风 . 他在那些酷炫的MV里始终表情紧张, 不苟言笑, 与周围的那一切格格不入 .  相反在采访视频里 , 相对自然多了, 脸上也洋溢出自信与从容 . 我相信他自己也不喜欢浮夸风, 只是他从他所接触到的各种现代媒介中, 得到了只有浮夸才是高大上的这种印象, 所以他才要求搞成这样的浮夸. 他的浮夸都是假浮夸, 他不会玩那些大明星真浮夸的那套 .人们嘲讽他邯郸学步的假浮夸, 却趋之若鹜真浮夸 . \n我遇到过许多如庞麦郎一样的人 . 有一次坐公交车, 一个工地的小哥身上都是泥地坐在车上, 我能感受到别人对他的嫌弃, 也能感受到他的焦躁不安, 到站后, 他小心翼翼地把自己的座位擦得干干净净才下车 , 虽然这一切理论上都是他应该做的, 但是看到这种场景总会觉得心里难过. 还有一次, 我和一群在我们学校旁边造房子的工人走在一幢女生寝室楼下的马路上, 他们作为一个工人当然会很自然地去看旁边那些寝室楼, 更何况很有可能这楼本身就很有可能是他们盖的 . 但是正当他们在看的时候, 工人里的一个小伙子却阻止了他们, 说他们这样看女生宿舍会被人报警的 . 那时我听了也觉得特别难受, 但是仔细想想, 虽然女生宿舍的确是不能随便看的,  但是如果路上一群男大学生看, 大家可能觉得这就是青春, 换成是工人了就不行了, 还要报警了. 我相信那个工人一定是受到了足够多的白眼才会有这样的谨小慎微.\n我想庞麦郎就是这些人中的一员, 我自己也是这些人中的一员. 甚至于在我所得知到的许多资料中看来, 江泽民这样的人也是这些人中的一员.甚至于今天如此巨大的所谓的互联网浪潮, 创业浪潮又何尝不是一场空虚浮夸的寻找滑板鞋的运动 .  这个国家进行到这一步, 每个人或多或少, 或绝对或相对, 都会在这首歌里看到自己.  多疑, 自卑, 虚伪, 崇洋, 媚俗, 愚昧, 荒诞 .  \n我们学校旁边有一个阿里巴巴, 所谓的全球市值前几的公司, 它的建筑很现代, 很漂亮, 他每年能赚多少多少亿, 但是就在它几百米开外, 有一条街, 里面有最最中国农村特色的各种破烂小吃店,妓院按摩房, 情趣用品店, 廉价旅馆, 各色杂货店, 那里到处都在拆, 都在造, 路都没有一条平的. 我们每个人就生活在这种城乡结合部里.  即便你再怎么努力, 再怎么包装自己, 每座城市的光鲜角落里都会藏着一个你努力掩盖的自己, 一个破烂恶俗的真实 .\n我们以为滑板鞋能让自己跳舞更加好看,  的确我们买到了滑板鞋以后, 能有一群同样拥有了滑板鞋的圈子, 圈子里的人互相夸耀对方的鞋子真是漂亮 ,  只不过最后都忘记了当初要跳舞的事.  \n最近火的另外一首歌是上海彩虹室内合唱团的> ,  用正经的方式演绎一个不正经的故事 . \n这两件事让我想到, 安迪沃霍尔对于艺术的看法.  他把许多最最平民的东西都提升到了艺术的范畴里. 我在所接触到的仅有的艺术世界里, 许多东西看似高雅, 事实上在我个人的看法里, 和在一个小圈子里互相夸耀彼此的滑板鞋是有多么漂亮毫无区别 . 高雅不应当是高等的, 事实上, 今天许多微博下面的评论都可以作为一种艺术来欣赏 . 只是这些艺术都是零散的, 碎片的, 无法形成完整的概念 . \n20世纪以后, 技术的进步让艺术得到了走向平民的能力, 而艺术却很少去利用这一能力.  如果一样东西无法被欣赏, 是创作者的悲哀, 而非创作者的荣耀 . 何况平民的不一定就是低俗的, 即使它看起来很俗, 很口语, 但是人感受艺术的感情是真切的, 是和所谓的高雅艺术共通的. \n互联网技术起来后, 曾经所有的话语权权威都被打破. 艺术也瞬间登上了任人评说的舞台. 甚至于艺术的形态也开始百花齐放, 似乎一切稀罕的事都能够带一带艺术的帽子 . 我庆幸生在这样一个时代, 即便娱乐会让艺术死, 人类天然的创造力也不会让艺术断绝. \n其实我一直觉得未来的文化市场会被中国人承包, 这几乎已经会成为一定的事情了. 直到今天, 欧美的电视剧电影还在二战, 罗马, 中世纪这种耳熟能详的故事里打转, 鲜能发掘出更多更精彩的故事 . 而中国的文化崛起的时代还远远没有开始, 这片都是空的. 只要国家能够放开各种低智无耻的管治 , 政党能够注入更多年轻的血液. 甚至都不用等待中国人自己, 欧美如果能够有足够的谦虚也应该来”掠夺掠夺”这片广袤的土地. 毕竟 , 60多年里, 中共还真没在文化上做过多少好事,反而断子绝孙的事做了不少, 想必短时间的未来里也不会有什么希望. \n值得一提的是, 在YouTuBe的庞麦郎访谈下 ,  有个台湾人对庞麦郎说自己是台湾人表达抗议, 觉得大陆人理解的台湾人就是吃得起茶叶蛋, 高大上的代言词. 所以, 人口的确是有很多红利的, 格局和创造力就是一方面. 如果有一天墙能够开放, 我们强大的文化创作能力一定会比部分小粉红的污染能力走得更远, 更持久. 期待这一天. \n","title_tokenize":["滑板鞋","艺术"],"content_tokenize":["事","都","已","忘记","现在","还","记得","晚上","母亲","问","今天","不","开心","说","想象","中","一双","滑板鞋","与众不同","最","时尚","舞蹈","肯定","棒","全部","城市","找","遍","街","都","没有","说","将来","会","找到","时间","时间","会","答案","星期天","再次","寻觅","依然","没有","发现","月","后","去","第二个","城市","人们","称","魅力","都","时间","很快","夜幕","就要","降临","我想","必","须要","离开","正要","走时","看到","一家","专卖店","那就是","滑板鞋","滑板鞋","时尚","时尚","最","时尚","回家","路上","情不自禁","磨擦","磨擦","光滑的","地上","磨擦","月光","下","看到","身影","有时","很远","有时","很","近","感到","一种","气力","驱使","脚步","有了","滑板鞋","天黑","都","一步","两步","一步","两步","一步一步","似","爪牙","魔鬼","步伐","磨擦","磨擦","节拍","这是","生命","中","美好的","时刻","完成","最喜欢","舞蹈","美丽的","月光","下","美丽的","街道","上","告知","这是","真","这不","梦","一步","两步","一步","两步","一步一步","似","爪牙","魔鬼","步伐","当年","刚","出来","许多人","都","带","嘲讽","看","首","歌","看","这歌","背","后","杀马","特","青年","以为","凤凰","传奇","那种","一路","货色","后来","杂志","一篇","采访","庞麦郎","文章","讲","违约","幼稚","何土","笑笑","过去了","昨天","不知道","重新","听","到了","首","歌","瞬间","震动","尼尔","波兹曼","说","文娱","至死","毫无疑问","首","歌","大众","文娱","出来","产物","甚至于","歌","编曲","论坛","网友","恰巧","途经","自娱自乐","谱","曲","文娱","并没有","贬低","首","歌","价值","相反","许多人","听到","首","歌","会","去","嘲笑","仔细","想想","真","嘲笑","首","歌吗","韩寒","书","东西","或许","所谓","艺术","上","并没有","技术","含量","也不","应当","得到","那么多","人","追捧","东西","里","其实","都","能够","看到","这个时代","真切的","样子","韩寒","庞麦郎","都是","小镇","青年","星斗","大海","奔跑","不同的","韩寒","明显","情商","智商","更","高于","庞麦郎","庞麦郎","至始至终","都","停","留在","小镇","青年","桎梏","里","庞麦郎","不想","桎梏","小镇","都","不想","桎梏","中国","谎称","台湾","基隆人","还要","MV","里加","入","欧美","元素","典型","国内","土豪","意淫","版本","欧美","风","酷炫","MV","里","始终","表情","紧张","不苟言笑","周围","格格不入","相反","采访","视频","里","相对","自然","脸上","弥漫","出自","信","从容","相信","他自己","也不","喜欢","浮夸风","接触到","现代","媒介","中","到了","只","浮夸","才是","高大","上","这类","印象","才","要求","搞成","浮夸","浮夸","都是","假","浮夸","不会","玩","大","明星","真","浮夸","套","人们","嘲讽","邯郸学步","假","浮夸","却","趋之若鹜","真","浮夸","遇到","庞麦郎","人","一次","坐","公交车","工地","小哥","身上","都是","泥","坐在","车上","感受到","厌弃","感受到","烦躁","不安","到站","后","小心翼翼","坐位","擦","干干净净","才","下车","理论上","都是","应当","做","看到","这类","场景","总","会","觉得","心里","难过","一次","一群","学校","旁边","造","房子","工人","走","1","幢","女生","寝室","楼下","马路","上","工人","会","很","自然地","去","看","旁边","寝室","楼","更何况","很有可能","这楼","本身","很有可能","盖","正当","看","工人","里","小伙子","却","阻止","说","看","女生","宿舍","会","人","报警","听","觉得","特别","难受","仔细","想想","女生","宿舍","的确","不能","随便","看","路上","一群","男","大学生","看","大家","可能","觉得","青春","换成","工人","不行了","还要","报警","相信","工人","一定","遭到","足够","白眼","才","会","谨小慎微","我想","庞麦郎","人中","一员","也是","人中","一员","甚至于","得知","资料","中看","江泽民","人","也是","人中","一员","甚至于","今天","巨大的","所谓","互联网","浪潮","创业","浪潮","未尝","不是","一场","空虚","浮夸","寻觅","滑板鞋","运动","国家","进行","一步","每个人","或多或少","绝对","相对","都会","首","歌","里","看到","多疑","自卑","虚伪","崇洋","媚俗","愚昧","荒谬","学校","旁边","阿里","巴巴","所谓","全球","市值","前","公司","建筑","很","现代","很","漂亮","每一年","赚","亿","百米","一条","街","里面","最最","中国","农村","特点","破烂","小吃店","妓院","推拿","房","情趣","用品店","便宜","旅馆","各色","杂货店","到处","都","拆","都","造","路","都","没有","一条","平","每个人","生活","这类","城乡","结合部","里","再","努力","再","包装","座","城市","鲜明","角落","里","都会","藏","努力","掩盖","破烂","恶俗","真实","以为","滑板鞋","舞蹈","更加","好看","的确","买","到了","滑板鞋","以后","一群","具有","滑板鞋","圈子","圈子","里","人","相互","夸耀","对方","鞋子","真是","漂亮","只不过","最后","都","忘记","当初","舞蹈","事","最近","火","一首","歌","上海","彩虹","室内","合唱团","正经","方式","演绎","不","正经","故事","两件","事","我想","安","迪沃","霍尔","艺术","看法","最最","平民","东西","都","提升","到了","艺术","范畴","里","接触到","唯一","艺术","世界","里","东西","看似","高雅","事实上","个人","看法","里","小圈子","里","相互","夸耀","滑板鞋","多么","漂亮","毫无","辨别","高雅","不","应当","高等","事实上","今天","微博","下面","评论","都","一种","艺术","欣赏","只","艺术","都是","零散的","碎片","没法","构成","完整的","概念","20世纪","以后","技术","进步","艺术","到了","走向","平民","能力","艺术","却","很少","去","利用","1","能力","东西","没法","欣赏","创作者","悲痛","非","创作者","光荣","平民","不一","定","低俗的","看起来","很","俗","很","口语","人","感受","艺术","感情","真切的","所谓","高雅","艺术","共通","互联网","技术","起来","后","曾","话语权","权威","都","打破","艺术","瞬间","登","上了","任人","评说","舞台","甚至于","艺术","形态","百花齐放","恍如","稀罕的","事","都","能够","带","一带","艺术","帽子","庆幸","生","时期","文娱","会","艺术","死","人类","天然","创造力","也不","会","艺术","断绝","其实","觉得","未来","文化市场","会","中国人","承包","几近","已","会","成为","一定","事情","直到","今天","欧美","电视剧","电影","还","二战","罗马","中世纪","这类","耳熟能详","故事","里","打转","鲜","发掘","出","更多","更","精彩的","故事","中国","文化","崛起","时期","还","远远","没有","片","都是","空的","国家","能够","放开","低智","无耻的","治","政党","能够","注入","更多","年轻的","血液","都","不用","等待","中国人","欧美","能够","足够","谦虚","应当","掠夺","掠夺","片","广袤的","土地","毕竟","60","多年","里","中共","还","真","没","文化","上","做","过量","少","好事","反而","断子绝孙","事","做","很多","想必","短时间","未来","里","也不","会","希望","值得一提的是","YouTuBe","庞麦郎","访谈","下","台湾人","庞麦郎","说","台湾人","表达","抗议","觉得","大陆","人","理解","台湾人","吃得","茶叶蛋","高大","上","代","言词","人口","的确","很多","红利","格局","创造力","有一天","墙","能够","开放","强大的","文化","创作","能力","一定会","部份","小","粉红","污染","能力","走","更远","更","持久","期","一天"]},{"title":"医生与工程师","url":"https://joway.wang/posts/随感/2016-01-16-医生与工程师.html","content":"前几天看了一篇讲绝大部分码农配不上”工程师”这个title的文章，后来看到V2EX和知乎上都有讨论，甚至内核恐慌里也谈及了这篇文章。\n\n今天在医院里看着牙医专注地为我这副烂牙折腾了近一个小时，中途没有休息也没有放松，而且都是拿着一些诸如钻头和紫外线枪这种粗暴的装备操作着精细的牙齿。我突然就联想起之前的那篇文章，似乎瞬间明白了什么才配算是工程师。\n医生其实的确是一个挺让人心疼的职业，尤其是那些上手术台的医生。假如我写的每一行代码都会被人使用超过四五十年，而且它的质量好坏直接影响了别人的生活体验甚至生命安全，那么我想我每敲一个字手都是会在颤抖的。但是这事实上就是医生的正常工作内容，给人换个器官，修根神经，中途还不能休息，必须全神贯注。相比之下，码农至少停下来喝杯咖啡的时间还是有的，也只有极少部分时候会有惊心动魄的写码体验。\n回到那篇文章的内容，大概是在谈码农的工作其实大部分都没有很高的质量保证，即便是很多大的公司的产品也总是难以避免Bug和崩溃的缺陷。乍一看，其实还真的是如此。这个世界上正常规划设计过且建造过程严守规范的建筑很少会有过几年就塌陷的，但是几乎还找不到一个软件可以担保自己正常运转一年都不会出现一个差错。即便是支付宝、网银这样的产品，最多也只是通过技术手段保证了你不会莫名其妙少钱或者多钱，但是支付失败或者无法响应也是常有的事。很多程序员喜欢说在代码的世界里，只要写错一个符号都不能编译通过，圈外人可能看到这个会觉得代码就是精确无误的一样，事实上这就是种忽悠而已。\n当然，或许简单地把软件行业和建筑行业进行类比有点不公平，毕竟软件比建筑复杂得太多，参与人员也太多。但即便不谈稳定性，甚至不谈代码的优雅与否，简单以清晰干净的设计来讲，很多项目其实都是不符合要求的。这难怪会有人认为普通码农配不上工程师的头衔。\n我工程上并没有太多经验，写过太多烂代码，连当一个合格的码农都还欠火候，但是我还是以着成为一名合格工程师的理想在努力。并且我也觉得一个合格的工程师本身就有助于成为一个合格的人。\n","title_tokenize":["医生","工程师"],"content_tokenize":["前几天","看","一篇","讲","绝大部分","码农配","不","上","工程师","title","文章","后来","看到","V","2","EX","知","上","都","讨论","内核","恐慌","里","谈及","这篇文章","今天","医院","里","看","牙医","专注地","副","烂牙","折腾","近","小时","中途","没有","休息","没有","放松","都是","拿着","诸如","钻头","紫外线","枪","这类","粗暴的","设备","操作","精细的","牙齿","突然","联想","之前","篇文章","恍如","瞬间","明白","才","配","算是","工程师","医生","其实","的确","挺","人心","疼","职业","尤其是","上","手术台","医生","假定","写","一行","代码","都会","人","使用","超过","四五十年","质量","好坏","直接","影响","生活","体验","生命安全","那末","我想","敲","字","手","都是","会","颤抖","这事","实","上","医生","正常","工作","内容","人","换","器官","修根","神经","中途","还","不能","休息","必须","全神贯注","相比","之下","码农","最少","停下来","喝","杯","咖啡","时间","极","少","部份","会","触目惊心","写","码","体验","回到","篇文章","内容","大概是","谈码农","工作","其实","大部分","都","没有","很","高的","质量保证","便是","很多","大的","公司","产品","总是","难以","避免","Bug","崩溃","缺点","乍一看","其实","还","真","世界上","正常","计划","设计","建造","进程","严守","规范","建筑","很少","会","几年","塌陷","几近","还","找不到","软件","担保","正常","运转","一年","都","不会","出现","过失","支付","宝","网银","产品","最多","技术","手段","保证","不会","莫名其妙","少","钱或者","多钱","支付","失败","没法","响应","也是","常","事","很多","程序员","喜欢","说","代码","世界","里","写","错","符号","都","不能","编译","圈外人","可能","看到","会","觉得","代码","精确","无误","事实上","忽悠","或许","简单地","软件","行业","建筑行业","进行","类比","有点","不公平","毕竟","软件","建筑","复杂得","太多","参与","人员","太多","不","谈","稳定性","不","谈","代码","优雅","简单","清晰","干净的","设计","来讲","很多","项目","其实","都是","不符合","要求","难怪","会","有人","认为","普通","码农配","不","上","工程师","头衔","工程","上","并没有","太多","经验","写","太多","烂","代码","合格的","码农","都","还","欠","火候","还","是以","成为","一位","合格","工程师","理想","努力","觉得","合格的","工程师","本身","有助于","成为","合格的","人"]}]